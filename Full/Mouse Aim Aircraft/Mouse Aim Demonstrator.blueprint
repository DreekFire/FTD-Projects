{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Mouse Aim Demonstrator","Version":27,"SavedTotalBlockCount":441,"SavedMaterialCost":21212.2012,"ContainedMaterialCost":380.258545,"ItemDictionary":{"1466":"91f61454-6e53-4df0-9ced-e4d86a98ab88","1462":"bdf96eb8-6d43-4b2e-8610-68952484ca04","845":"9411e401-27da-4546-b805-3334f200f055","874":"b2ca635d-350c-4977-b8d4-2b2dd28cd2d7","878":"8aceae65-2dce-44b7-94b1-b4bd34d287a5","850":"a3ea61a8-018c-4277-afd9-ac0a34faa759","855":"8c2aaf82-442e-46a7-9ea5-1b7862cacb87","858":"2cdbdb66-132e-4202-90c6-e0a2d8022cc6","875":"a6cfd078-bc39-4ad8-a47f-49097913a27b","851":"2a3905ff-2030-421d-a2bf-90fba71c1c5e","839":"fdba2b5d-3570-43fb-a9e1-10a0c0bba0ef","932":"729b7ea3-59d5-4182-9177-684da6fbe0a9","956":"787524d3-1b60-44d8-bef2-d42156c55446","162":"2d519ca8-1f12-4a8e-9340-aa6648b5e799","927":"174b5b41-b70e-485d-b00a-a61cc9826b2c","838":"54b18bde-2698-4840-a2aa-a37efba89ff4","933":"e42929f1-ccd0-4fff-8413-6cb94cf08405","952":"0375d846-a203-4813-a330-0d8fd1e6586e","879":"2b1b3011-0b81-472e-aa42-26383f453268","1464":"80a0edf3-97c0-4bf6-bfc3-80dc68525080","1463":"020fae5d-c759-4456-87e6-7e423752a427","1459":"a6ad7eaa-e826-42d5-b4f5-7358a842623f","1460":"f5e7ac10-3c0c-4999-8287-07245ee81062","846":"9af822b3-80d9-46bd-9ce0-e6e5c2e61da4","847":"b5d46bb7-d49e-42f6-817b-323fbf6d62b0","844":"649f2aec-6f59-4157-ac01-0122ce2e6dad","828":"77b5b1be-56a8-4699-b9fb-a967a03897c5","829":"903ed616-47a5-4aa2-a85c-f3e18ce9e620","849":"c6176cb5-0a32-4d68-a749-8ee33b2230c1","166":"3cc75979-18ac-46c4-9a5b-25b327d99410","856":"ba5c8d03-9093-47a9-a8cd-b721ceeee1dd","859":"afb33fc2-3071-408a-b312-da22478c0a14","269":"c743b888-a53c-42b8-b4f0-3afc6d763617","265":"b1ef236a-9ecb-406c-b4f0-6ef0fbb50bd1","240":"310a7a9a-8d4e-4365-a877-1a8e2bac2a81","559":"d4e23d98-fbde-449e-823f-872004cadc7a","1222":"a7f5d8de-4882-4111-9d01-436493e5b2d8","1469":"9e02bc1c-fddd-47b8-9cd8-3b6dc335e409","560":"478efa9f-5743-4238-ad2e-750770d7da11","842":"3a0be065-8983-46ea-8a1f-099ff9d544c7","840":"a7e535a6-e684-4afc-b354-b2470094b014","1666":"e62413c3-e841-4eda-9e2a-ceaec75e8b64","871":"7530d72e-1b5b-408c-9abc-59957a90970f","867":"1e5247be-25c1-45bc-92a6-e2ab1bfaaa8c","843":"8f9dbf41-6c2d-4e7b-855d-b2432c6942a2","865":"272f0dea-8aac-4ca9-98e6-79897e7df0f9","869":"29c40e04-59fb-45dc-a80b-31ee1c4f82ac","98":"a3d914e9-697d-425f-abda-a6b21b4de952","1623":"85ea264e-6ef0-48df-9adc-9b1a8fe15247","1461":"c855c2f8-716b-44ba-901f-2dbfb4bf1612","1465":"47f51fca-7668-45b9-8201-51541110833e","1221":"46f54639-5f91-4731-93eb-e5c0a7460538","167":"ab699540-efc8-4592-bc97-204f6a874b3a","615":"56c27d46-39b3-4ac1-b4f7-71c118d8dde9","643":"5d8870cd-d401-4b52-a3dc-641c02b3b31f","881":"efb3284f-bedc-453f-9519-043f77f2e85d","1621":"2eca89e0-5c2f-4b1c-a5bf-df5190e13ef4","120":"bf0db0d2-8582-41d2-bcfe-5299bec3d06b","67":"61c56906-c2ae-4953-8fef-2e18e5ff7a68","1615":"819dea06-da54-4236-a041-7346e3dad3d2","1614":"e8c5c921-b116-45cd-b0de-7a37973d5158","815":"ccb16d68-186c-4896-82e3-9e9213271ace","814":"20f74da8-3052-4e5a-8b9a-28252781f37b","239":"154e5001-729c-4a9f-983b-342d3092a0f3","280":"26b0f142-9419-41f1-9c13-3a2b62437f60","812":"ab8dda56-4b5e-47cf-886c-219a0259018b","813":"6df35bc7-4799-43bc-9f49-782e1e9a53a4","1625":"f62c34b8-727e-4f6d-8d75-97c52631b7f9","287":"d30acc39-3742-47bd-82de-f5e1b9af565d","1228":"db9ed060-d556-435b-945c-19c923e233d3","1215":"a2983545-008e-4926-a54a-89cc56de8f48","1216":"5a0d6e26-7939-437f-ba35-33d9b3cf193f","1023":"49714981-369a-4158-aff6-e562ee5f98d5","1022":"242e07fa-399f-4caa-bfc2-1b77bd2bd538","1616":"5dc0032d-d532-4766-b081-4204947bcaa0","1620":"9083c801-30fd-4c67-b571-b67aeb48ec88","820":"44b7168c-4c2b-4875-a1b5-f77029cf4658","821":"cc10dea1-469d-4574-b672-61c786284cf0","1606":"242be860-8b25-4bdc-91fd-c1fecba9a7f1","115":"d3924bae-be5a-43a0-be19-64fc7c8d6059","65":"8d948200-242c-47c3-b46a-ecdf40f7b39b","621":"c8fe583a-357b-4fa6-86f1-fc2de639c909","130":"9a564782-3a07-472b-ae06-5a7dfd123e7d","700":"76fb5718-e965-46ab-9f0c-c82baf648abf","769":"33d7dc96-ff04-4178-8f67-9c380d26f168","241":"86a6eb4b-cb64-4451-9dc5-94efff6b8ed6","411":"efb55635-4841-42b3-98f0-9aed90b2e826","414":"d9a36701-b452-4364-a2f0-cc822af38cd0","696":"811379b2-2e27-4268-b821-940766960802","760":"0639fbba-70be-4398-857c-6786dab39bea","110":"5b609887-c1dd-407b-b3b6-b1eb35d1e818","1611":"1dc0c474-f547-4570-85ed-6dc2f7ab33dd","334":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","136":"2ed46940-a47c-4283-bf5d-6b52132da9b4","333":"f29b1372-f4f3-4305-aa85-5fe214361fb7","342":"0d1d97b5-3c99-45bf-8a5d-e7a624b3ddb6","358":"1bb2d71d-cd5f-4a23-844b-8005dec7bd5c","969":"62568fd8-bb60-4e86-8ad7-3bd91d8dde58","159":"e63040c9-0027-4fd3-be30-67fe3e950140","147":"cdca5dec-eeee-4849-9b2e-73b23e216465","542":"c7d3ffb8-3ceb-40ae-a2b0-69c1f4d59462","537":"cacc9c8b-9149-4adf-a86c-5cf5f4b035b8","535":"26a852c0-da52-4232-8e04-69913c8edc13","544":"2b2d4fdc-8ffa-4399-985a-f9f5ec1263d0","551":"95e34566-9234-4559-b601-9a0b9b7c11e5","146":"788700be-1e74-46d7-9e34-1a5ec2747548","517":"b50989c9-03d4-4201-a8d4-459dcea86b05","473":"275b820d-dd55-49aa-9b09-48b58e8ab5da","157":"c5cec892-2e43-4905-9d28-44fc8ecb5cc7","158":"213026bc-fd7a-44e6-b543-a31c219aaef0","403":"dc8f69fe-f97c-404f-996c-1b934afa17b5","427":"011e4de9-c66c-4ce6-ad22-2fd6ac9df2a6","437":"703d6094-850b-45fc-a01c-25ceddd49dcb","428":"00b9dfc4-ac8f-4fee-bbe0-a76aeeb75627","466":"375f4305-47bc-4abd-8c68-b67cb50e7036","417":"0a1aa046-e841-4813-907e-6567e596a079","452":"faa18ecd-0edf-4167-8c30-8cf2b95f42e1","436":"52ff74a3-3d0f-4b2f-bfe3-23ff12f74354","435":"8a96edf6-93c3-47c2-b3ad-894598f262e3","433":"ac65ce78-2e21-465e-a28b-07ebbd65805e","429":"9e8fd38f-a406-4d87-8186-de37979d4d20","456":"575c59bf-c5be-4558-8ab7-7bb672f62ffb","1225":"5548037e-8428-43f8-bcb6-d730dbcd0a79","149":"2e86af10-00e0-4dad-9cac-3b87ca9e468d","150":"d83e6a25-e6c3-49df-9d0b-de3c5edb579b","109":"2e715d3f-349f-41e1-bd89-7f685939d5aa","362":"1725c9ed-29fd-438d-97f6-8f645a1865d4"},"Blueprint":{"ContainedMaterialCost":294.0,"CSI":[0.0,3.0,-1.0,0.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2999.984,8.477633,1.0,1.0,0.0,1.0,111.4063,907.031433,-1.0,0.0,3000.0,1.0,1.0,135000.0,0.0,8.067594,0.0,90.61951,20.0,0.1,0.1,1.0,1.0,3.0,-1.0,0.0,-1.0,0.0,-1.0,1.0,0.410039544,-1.0,0.0,0.0,240.0,135000.0,135000.0,0.0,120.0,-1.0,592.620056,296.7872,0.5,0.0,261.361633,512.1198,-1.0,12.0,0.0,0.0,0.0,7.7625556,0.0,0.0,0.0,0.0,0.08529053,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.30953,0.354535,0.054567,0.79008","0.401338,0.105022,0.462265,0.525019","0.462913,0.384848,0.593004,0.109731","0.682188,0.501784,0.131505,0.435385","0.321303,0.056916,0.360682,0.701864","0.574693,0.728586,0.918618,0.704478","0.43819,0.803103,0.907887,0.395644","0.83117,0.757529,0.666652,0.175828","0.675463,0.723664,0.339566,0.175991","0.582383,0.087971,0.310647,0.572633","0.212136,0.404522,0.770106,0.345874","0.874481,0.01694,0.45307,0.032828","0.127557,0.093725,0.115743,0.902709","0.639143,0.418663,0.191647,0.574554","0,0,0,0","0.094117,0,0.2,1","0.019607,1,1,1","0.980392,1,1,1","0,0,0,1"],"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","1,0,0","2,0,0","1,0,1","2,0,1","2,0,-2","2,0,-3","2,0,-4","2,0,2","1,0,2","1,0,-2","1,0,-3","1,0,-4","1,0,-1","2,0,-1","0,0,-2","0,0,-3","0,0,-4","3,0,-4","4,0,-5","3,0,-3","4,0,-4","4,0,-3","3,0,-2"],"BLR":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,0,0,0],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAAA4AAQAAAAAAAAIAAAAAAAADAAAAAAcAJIgAAAAHAF0AAAAABwBdGwEAAAcAZAAEAACgwQAABDcAAAABAAAjAAAAIwCJAAAAAAAA7GIAAAAAAIZ7AAAABwBdAAAAABwAXRsBAAAcAAIABAAAcEEBAATNzMw+BAAEAACAPwcABAAAgD8AAAQ4AAAAAgAAIwAAACMAiQAAAAAAAOxiAAAAAACGewAAAAcAXQAAAAAcAF0bAQAAHAACAAQAAHBBAQAEzczMPgQABAAAgD8HAAQAAIA/AAAEOQAAAA8AAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxAAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxEAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxIAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxMAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxQAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxUAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxYAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvxcAAA4AAAAHAAAAAAAAAABdGwEAAAcAAAAEAACAvw==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"TEMP","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"-3,1,12","LocalRotation":"0,0,-0.999999,0","ForceId":0,"TotalBlockCount":24,"MaxCords":"4,0,2","MinCords":"0,0,-5","BlockIds":[147,542,542,537,537,535,535,544,551,551,535,535,544,537,537,560,560,560,560,560,560,560,560,560],"BlockState":"=0,24","AliveCount":24,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":38,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":24},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","-1,0,0","-2,0,0","-2,0,1","-1,0,1","-2,0,-1","-2,0,-2","-1,0,-2","-2,0,-3","-2,0,2","-2,0,-4","-1,0,2","-1,0,-3","-1,0,-4","-1,0,-1","0,0,-2","0,0,-3","-3,0,-4","-4,0,-5","0,0,-4","-3,0,-3","-4,0,-4","-3,0,-2","-4,0,-3"],"BLR":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,0,0,0,0],"BP1":null,"BP2":null,"BCI":[31,31,31,31,31,31,31,31,31,31,0,31,31,0,31,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAAA4AAQAAAAAAAAIAAAAAAAADAAAAAAcAJIgAAAAHAF0AAAAABwBdGwEAAAcAZAAEAACgQQAABDQAAAABAAAjAAAAIwCJAAAAAAAA7GIAAAAAAIZ7AAAABwBdAAAAABwAXRsBAAAcAAIABAAAcMEBAATNzMy+BAAEAACAPwcABAAAgD8AAAQ1AAAAAgAAIwAAACoAiQAAAAAAAOxiAAAABwCGewAAAA4AXQAAAAAjAF0bAQAAIwAAAARymf8AAgAEAABwwQEABM3MzL4EAAQAAIA/BwAEAACAPwAABDYAAAAPAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8QAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8RAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8SAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8TAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8UAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8VAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8WAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8XAAAOAAAABwAAAAAAAAAAXRsBAAAHAAAABAAAgL8=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"TEMP","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"3,1,12","LocalRotation":"0,0,-0.999999,0","ForceId":0,"TotalBlockCount":24,"MaxCords":"0,0,2","MinCords":"-4,0,-5","BlockIds":[147,542,542,537,537,537,535,535,535,551,544,551,535,544,537,560,560,560,560,560,560,560,560,560],"BlockState":"=0,24","AliveCount":24,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":39,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":24},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,-1"],"BLR":[0,0],"BP1":null,"BP2":null,"BCI":[0,0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAAAD8AAAQqAAAAAQAAKgAAABwAiQAAAAAAACSIAAAAAACGewAAAAAA7GIAAAAVAF0AAAAAFQBdGwEAABUAAAAEAACAQAQABAAAgD8HAAQAAIA/AAAExgAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"TEMP","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"-9,1,8","LocalRotation":"0,0,0.707106,0.707106","ForceId":0,"TotalBlockCount":2,"MaxCords":"0,0,0","MinCords":"0,0,-1","BlockIds":[147,517],"BlockState":"00","AliveCount":2,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":40,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":2},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,-1"],"BLR":[0,0],"BP1":null,"BP2":null,"BCI":[0,0],"BEI":null,"BlockData":"AAAAKgAAABIAAQAAAAAAAAIAAAAABAADAAAAAAQAJIgAAAALAF0AAAAACwBdGwEAAAsACQABAWQABAAAAD8AAAQqAAAAAQAAKgAAABwAiQAAAAAAACSIAAAAAACGewAAAAAA7GIAAAAVAF0AAAAAFQBdGwEAABUAAAAEAACAQAQABAAAgD8HAAQAAIA/AAAExwAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"TEMP","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"9,1,8","LocalRotation":"0,0,-0.707106,0.707106","ForceId":0,"TotalBlockCount":2,"MaxCords":"0,0,0","MinCords":"0,0,-1","BlockIds":[147,517],"BlockState":"00","AliveCount":2,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":41,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":2},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","-3,0,-2","-2,0,-2","-2,0,-3","-3,0,-3","3,0,-2","2,0,-2","2,0,-3","3,0,-3","0,0,-5","0,0,-6","0,0,-1","1,0,-3","-1,0,-3","1,0,-2","-1,0,-2"],"BLR":[0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0],"BP1":null,"BP2":null,"BCI":[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],"BEI":null,"BlockData":"AAAAKgAAAAcAAQAAAAAAAAIAAAAAAAADAAAAAAAAJIgAAAAAAF0AAAAAAABdGwEAAAAAAAAEngAAAAEAABUAAAAHAOYCAAAAAABdAAAAAAcAXRsBAAAHAAMABAAAgD8CAAAVAAAABwDmAgAAAAAAXQAAAAAHAF0bAQAABwADAAQAAIA/AwAAFQAAAAcA5gIAAAAAAF0AAAAABwBdGwEAAAcAAwAEAACAPwQAABUAAAAHAOYCAAAAAABdAAAAAAcAXRsBAAAHAAMABAAAgD8FAAAVAAAABwDmAgAAAAAAXQAAAAAHAF0bAQAABwADAAQAAIA/BgAAFQAAAAcA5gIAAAAAAF0AAAAABwBdGwEAAAcAAwAEAACAPwcAABUAAAAHAOYCAAAAAABdAAAAAAcAXRsBAAAHAAMABAAAgD8IAAAVAAAABwDmAgAAAAAAXQAAAAAHAF0bAQAABwADAAQAAIA/DAAAFQAAAAcA5gIAAAAAAF0AAAAABwBdGwEAAAcAAwAEAACAPw0AABUAAAAHAOYCAAAAAABdAAAAAAcAXRsBAAAHAAMABAAAgD8OAAAVAAAABwDmAgAAAAAAXQAAAAAHAF0bAQAABwADAAQAAIA/DwAAFQAAAAcA5gIAAAAAAF0AAAAABwBdGwEAAAcAAwAEAACAPw==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"0,2,2","LocalRotation":"0,0,0,1","ForceId":0,"TotalBlockCount":16,"MaxCords":"3,0,0","MinCords":"-3,0,-6","BlockIds":[147,559,559,559,559,559,559,559,559,473,473,845,559,559,559,559],"BlockState":"=0,16","AliveCount":16,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":45,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":16},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[31],"BEI":null,"BlockData":"AAAAKgAAACAAAwAAAAAAAAEAAAAAAAACAAAAAAAAdiYAAAAOAEIYAAAADgBdGwEAAA4AAAAEPwAAAAEABM3MzD0AAATkAAAAAQAIam95c3RpY2s=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Two Axis Turret","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":158,"LocalPosition":"0,0,18","LocalRotation":"0,0,0,1","ForceId":0,"TotalBlockCount":1,"MaxCords":"0,0,0","MinCords":"0,0,0","BlockIds":[157],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":50,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":1},{"ContainedMaterialCost":43.12928,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","-2,-1,4","-2,-1,5","0,0,1","0,0,2","0,1,1","0,1,2","0,-1,2","0,-1,1","1,-1,2","1,-1,1","-1,1,2","-1,1,1","1,1,2","1,1,1","-1,0,1","-1,-1,1","-1,-1,2","1,0,1","1,0,2","-1,0,2","-1,-1,3","1,0,3","-1,0,3","-2,1,3","-1,1,3","0,1,3","1,1,3","-2,-1,3","-2,0,3","-2,0,2","-2,-1,2","-2,0,1","-2,1,2","-1,0,4","0,0,3","0,1,4","0,0,4","-2,-1,9","0,0,5"],"BLR":[0,18,18,18,18,7,7,9,9,9,9,7,7,3,3,9,13,13,7,7,9,13,5,6,3,10,10,1,5,16,2,6,6,2,4,13,20,0,18,4],"BP1":null,"BP2":null,"BCI":[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0],"BEI":null,"BlockData":"AAAAKgAAAAcAAQAAAAAAAAIAAAAAAAADAAAAAAAAJIgAAAAAAF0AAAAAAABdGwEAAAAAAAAE9gAAAAEAADEAAABlAAAAAAAAAAAcAAAAABwAAQAAAAAcAAIAAAAAHAB2JgAAACoAQhgAAABGAF0bAQAAVAAAAASQwvU8AQAEAgAAAA0ABACACUQOAATNzMw9AAAEAwAAAAEABAAAAEAAAAQCAAAAAQAEzcxMPQIABM3MzD0DAATNzEw9AAAEGGbWSAEABC/L2EUAAAQBAAAAAQAHY2Fubm9ucwUAABUAAAAOAN8fAAAAAAAcAAAAAAcAXRsBAAAOAAAABAAAQEAAAAQAAQAABgAAFQAAAA4A3x8AAAAAABwAAAAABwBdGwEAAA4AAAAEAABAQAAABAABAAAHAAAVAAAADgDfHwAAAAAAHAAAAAAHAF0bAQAADgAAAAQAAEBAAAAEAAEAAAgAABUAAAAOAN8fAAAAAAAcAAAAAAcAXRsBAAAOAAAABAAAQEAAAAQAAQAACQAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEACgAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEACwAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEADAAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEADQAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAE9wAAAA4AAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABPgAAAAPAAAOAAAAHQAAAAAAAAAAXRsBAAAWAAAADAAAAAAAAAAADwAAAAEABAEAAAAAAAT6AAAAEAAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAE/AAAABEAAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABP0AAAASAAAOAAAAHQAAAAAAAAAAXRsBAAAWAAAADAAAAAAAAAAADwAAAAEABAEAAAAAAAT+AAAAEwAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAE/wAAABQAAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABAEBAAA=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"-1,1,8","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":40,"MaxCords":"1,1,9","MinCords":"-2,-1,0","BlockIds":[147,403,427,437,437,428,428,428,428,466,466,466,466,417,417,417,417,417,417,417,417,452,452,436,435,436,436,437,436,436,435,435,452,452,452,433,452,437,429,456],"BlockState":"=0,40","AliveCount":40,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":73,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":40},{"ContainedMaterialCost":43.12928,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1","0,0,2","0,0,4","2,-1,5","2,0,2","2,-1,2","2,-1,3","2,0,3","1,0,3","1,1,3","2,1,3","0,0,3","0,1,3","-1,1,3","0,1,2","0,1,1","0,-1,2","0,-1,1","-1,-1,2","-1,-1,1","1,1,2","1,1,1","-1,1,2","-1,1,1","1,0,2","1,0,1","1,-1,2","1,-1,1","-1,0,2","1,-1,3","1,0,4","0,1,4","2,1,2","2,0,1","-1,0,3","-1,0,1","2,-1,9","0,0,5","2,-1,4"],"BLR":[0,0,0,0,16,10,14,7,16,4,10,9,7,10,23,5,5,11,11,11,11,5,5,1,1,11,11,15,15,5,15,4,21,2,6,7,5,16,4,16],"BP1":null,"BP2":null,"BCI":[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0],"BEI":null,"BlockData":"AAAAKgAAAAcAAQAAAAAAAAIAAAAAAAADAAAAAAAAJIgAAAAAAF0AAAAAAABdGwEAAAAAAAAEBAEAAA8AABUAAAAOAN8fAAAAAAAcAAAAAAcAXRsBAAAOAAAABAAAQEAAAAQAAQAAEAAAFQAAAA4A3x8AAAAAABwAAAAABwBdGwEAAA4AAAAEAABAQAAABAABAAARAAAVAAAADgDfHwAAAAAAHAAAAAAHAF0bAQAADgAAAAQAAEBAAAAEAAEAABIAABUAAAAOAN8fAAAAAAAcAAAAAAcAXRsBAAAOAAAABAAAQEAAAAQAAQAAEwAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAFAAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAFQAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAFgAADgAAAAYBAQAAAAAAAF0bAQAABgEAAP8AAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAFwAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAEBQEAABgAAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABAYBAAAZAAAOAAAAHQAAAAAAAAAAXRsBAAAWAAAADAAAAAAAAAAADwAAAAEABAEAAAAAAAQHAQAAGgAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAECAEAABsAAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABAkBAAAcAAAOAAAAHQAAAAAAAAAAXRsBAAAWAAAADAAAAAAAAAAADwAAAAEABAEAAAAAAAQKAQAAHQAADgAAAB0AAAAAAAAAAF0bAQAAFgAAAAwAAAAAAAAAAA8AAAABAAQBAAAAAAAECwEAACQAAA4AAAAdAAAAAAAAAABdGwEAABYAAAAMAAAAAAAAAAAPAAAAAQAEAQAAAAAABA0BAAAnAAAxAAAASQAAAAAAAAAAHAAAAAAcAAEAAAAAHAACAAAAABwAdiYAAAAqAEIYAAAAKgBdGwEAADgAAAAEkML1PAEABAIAAAANAAQAgAlEDgAEzczMPQAABAMAAAABAAQAAABAAAAEupg+SAEABBWgekUAAAQCAAAAAQAHY2Fubm9ucw==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"1,1,8","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":40,"MaxCords":"2,1,9","MinCords":"-1,-1,0","BlockIds":[147,437,437,437,427,435,435,436,433,436,436,435,433,436,437,428,428,428,428,466,466,466,466,417,417,417,417,417,417,417,452,452,452,452,452,452,417,429,456,403],"BlockState":"=0,40","AliveCount":40,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":74,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":40},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,0,1"],"BLR":[0,0],"BP1":null,"BP2":null,"BCI":[0,0],"BEI":null,"BlockData":"AAAAHAAAABUAAQAAAAAAAOYCAAAABwBdAAAAAA4AXRsBAAAOAAAABPhToz5kAAT4U6M+AAAEFwEAAAEAAA4AAAAHAAAAAAAAAABdGwEAAAAAAAAEGQEAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Telescopic Piston (1m) Constructable","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":150,"LocalPosition":"0,1,0","LocalRotation":"-0.707106,0,0,-0.707106","ForceId":0,"TotalBlockCount":2,"MaxCords":"0,0,1","MinCords":"0,0,0","BlockIds":[149,109],"BlockState":"00","AliveCount":2,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":83,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"593cdf60-b369-4dd5-b475-68c9e974d1d8","ObjectId":"d72204b4-1a53-464f-8dfc-7a4ee84a46ea","CreatorReadableName":"Blarint","HashV1":"b8b250ab887f951a03c38a0c1bb02dbc"},"BlockCount":2}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAHAAAABUAAQAAAAAAAOYCAAAABwBdAAAAAA4AXRsBAAAOAAAABOxRuD1kAATsUbg9AAAEFQEAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Telescopic Piston (1m) Constructable","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":150,"LocalPosition":"0,-1,0","LocalRotation":"-0.707106,0,0,0.707106","ForceId":0,"TotalBlockCount":3,"MaxCords":"0,1,0","MinCords":"0,0,0","BlockIds":[149],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":82,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"593cdf60-b369-4dd5-b475-68c9e974d1d8","ObjectId":"d72204b4-1a53-464f-8dfc-7a4ee84a46ea","CreatorReadableName":"Blarint","HashV1":"b8b250ab887f951a03c38a0c1bb02dbc"},"BlockCount":1}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAACMAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABDiVLkJkAAQAAPBBAAAERwAAAAEAB3lhd1NlYXQ=","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"-1,1,0","LocalRotation":"0,0,0.707106,-0.707106","ForceId":0,"TotalBlockCount":4,"MaxCords":"0,0,0","MinCords":"0,-1,0","BlockIds":[147],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":81,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"593cdf60-b369-4dd5-b475-68c9e974d1d8","ObjectId":"d72204b4-1a53-464f-8dfc-7a4ee84a46ea","CreatorReadableName":"Blarint","HashV1":"b8b250ab887f951a03c38a0c1bb02dbc"},"BlockCount":1}],"BLP":["0,0,0","-1,0,0"],"BLR":[0,7],"BP1":null,"BP2":null,"BCI":[0,0],"BEI":null,"BlockData":"AAAAKgAAACUAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABPEJY0BkAAQAAPBBAAAERgAAAAEACXBpdGNoU2VhdA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"-1,1,0","LocalRotation":"-0.499999,-0.499999,-0.499999,0.499999","ForceId":0,"TotalBlockCount":6,"MaxCords":"0,1,0","MinCords":"-1,0,0","BlockIds":[147,1225],"BlockState":"00","AliveCount":2,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":80,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"593cdf60-b369-4dd5-b475-68c9e974d1d8","ObjectId":"d72204b4-1a53-464f-8dfc-7a4ee84a46ea","CreatorReadableName":"Blarint","HashV1":"b8b250ab887f951a03c38a0c1bb02dbc"},"BlockCount":2}],"BLP":["0,0,0","-1,0,0"],"BLR":[0,15],"BP1":null,"BP2":null,"BCI":[0,0],"BEI":null,"BlockData":"AAAAKgAAACQAAQAAAAAAAAIAAAAABAADAAAAAAsAJIgAAAASAF0AAAAAEgBdGwEAABIACQABAWQABOBVq0FkAAQAAPBBAAAERQAAAAEACHJvbGxTZWF0","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Stabilized Chair","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"0,1,0","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":8,"MaxCords":"0,1,0","MinCords":"-1,0,0","BlockIds":[147,1225],"BlockState":"00","AliveCount":2,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":79,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"593cdf60-b369-4dd5-b475-68c9e974d1d8","ObjectId":"d72204b4-1a53-464f-8dfc-7a4ee84a46ea","CreatorReadableName":"Blarint","HashV1":"b8b250ab887f951a03c38a0c1bb02dbc"},"BlockCount":2}],"BLP":["0,0,0"],"BLR":[0],"BP1":null,"BP2":null,"BCI":[0],"BEI":null,"BlockData":"AAAAKgAAAAcAAQAAAAAAAAIAAAAAAAADAAAAAAAAJIgAAAAAAF0AAAAAAABdGwEAAAAAAAAECQAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Stabilized Chair","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"0,1,18","LocalRotation":"0,0.707106,0.707106,0","ForceId":0,"TotalBlockCount":9,"MaxCords":"0,1,0","MinCords":"0,0,0","BlockIds":[147],"BlockState":"0","AliveCount":1,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":78,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":1},{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","-1,0,0","0,0,-1","1,0,0","0,0,1","0,1,0","0,-1,0"],"BLR":[0,21,19,22,16,9,5],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAAAcAAQAAAAAAAAIAAAAAAAADAAAAAAAAJIgAAAAAAF0AAAAAAABdGwEAAAAAAAAEGwEAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Spin / Turn block","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":146,"LocalPosition":"0,0,11","LocalRotation":"0,0,0,1","ForceId":0,"TotalBlockCount":7,"MaxCords":"1,1,1","MinCords":"-1,-1,-1","BlockIds":[147,362,362,362,362,362,362],"BlockState":"=0,7","AliveCount":7,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":84,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":7}],"BLP":["-8,1,7","-8,1,8","-5,1,9","5,1,9","8,1,7","8,1,8","-2,0,10","2,0,10","-2,3,14","2,3,14","-1,3,14","1,3,14","-2,2,14","2,2,14","2,-1,18","2,0,18","2,2,17","1,-1,18","1,1,21","1,1,22","0,-1,19","0,1,21","0,1,22","-1,-1,18","-1,1,21","-1,1,22","-2,-1,18","-2,0,18","-2,1,17","-2,2,17","-5,1,10","5,1,10","-7,1,12","7,1,12","-6,1,13","6,1,13","-6,1,12","6,1,12","-7,1,11","7,1,11","2,3,13","-2,3,13","-2,1,14","2,1,14","3,2,13","-3,2,13","-2,0,14","2,0,14","-3,0,13","3,0,13","-5,2,11","5,2,11","-4,2,13","-4,0,13","4,0,13","-5,1,13","5,1,13","-5,1,14","5,1,14","0,3,6","1,3,9","-1,3,9","2,3,9","-2,3,9","-2,1,8","2,1,8","-2,1,7","2,1,7","-2,1,6","2,1,6","-2,1,9","2,1,9","-2,2,9","2,2,9","-4,1,11","4,1,11","-4,1,10","4,1,10","-1,3,10","0,3,10","1,3,10","0,3,14","-3,1,14","3,1,14","4,1,8","-4,1,8","1,0,5","-1,3,5","1,3,5","-1,0,5","0,3,17","0,2,4","0,-1,9","-1,-1,9","1,-1,9","-3,0,6","3,0,6","3,2,10","-3,2,10","4,2,10","-4,2,10","-5,0,11","5,0,11","-3,0,10","3,0,10","-4,0,10","4,0,10","-4,0,9","4,0,9","-5,0,9","5,0,9","-5,0,10","5,0,10","-5,2,10","5,2,10","-5,2,9","5,2,9","-4,2,9","4,2,9","0,2,13","3,1,15","4,1,14","-3,1,15","-4,1,14","3,1,10","3,1,11","-3,1,10","-3,1,11","-1,2,0","-3,2,-1","-3,2,-2","-1,2,1","1,2,1","3,2,-2","3,2,-1","1,2,0","-1,2,16","0,2,17","0,1,7","0,2,5","-1,2,6","-1,1,6","1,1,6","1,0,20","-1,0,20","-9,1,12","9,1,12","9,2,10","-9,2,10","9,0,10","-9,0,10","9,0,12","-9,0,12","9,0,13","-9,0,13","9,2,12","-9,2,12","10,1,10","-10,1,10","-4,1,7","4,1,7","-3,1,5","3,1,5","-1,2,14","1,2,14","0,2,-3","0,0,5","4,2,13","5,2,13","-5,2,13","5,0,13","-5,0,13","6,2,13","-6,2,13","6,0,13","-6,0,13","5,2,14","-5,2,14","5,0,14","4,2,12","-4,2,12","-4,0,12","4,0,12","-5,0,14","-3,1,9","-3,0,9","3,1,9","3,0,9","-2,0,6","2,0,6","-3,1,6","3,1,6","-3,2,9","3,2,9","-3,1,8","3,1,8","-2,-1,9","2,-1,9","4,1,9","-4,1,9","-1,2,5","1,2,5","0,2,1","0,1,1","-1,1,5","1,1,5","0,3,5","0,2,6","0,1,3","10,1,8","-10,1,8","9,1,10","-9,1,10","9,0,9","-9,0,9","-10,1,7","10,1,7","-9,2,8","9,2,8","-9,0,8","9,0,8","9,1,14","-9,1,14","0,1,8","0,-1,10","-1,-1,10","1,-1,10","-1,-1,17","1,-1,17","-2,-1,17","2,-1,17","0,0,17","2,1,17","-1,0,19","1,0,19","0,0,8","1,0,8","-1,0,8","-2,2,10","2,2,10","-2,1,10","2,1,10","0,2,8","-1,2,8","-3,-1,9","3,-1,9","3,-1,10","-3,-1,10","-2,0,9","2,0,9","0,0,15","0,0,14","0,0,13","0,0,12","1,2,6","1,2,8","1,2,9","0,1,16","1,0,21","0,0,21","-1,0,21","1,2,17","-1,2,17","0,2,18","-9,1,7","9,1,7","0,0,19","0,0,16","-1,0,18","-1,0,16","-1,1,16","0,-2,16","0,-1,16","0,-1,18","0,-1,14","0,-2,17"],"BLR":[22,22,3,1,23,23,12,12,18,16,0,0,18,16,16,16,0,12,16,16,12,16,0,12,18,18,18,18,18,0,3,1,21,20,21,20,18,16,21,20,2,2,18,18,0,0,12,12,12,12,3,1,18,12,12,0,0,18,16,0,17,19,17,19,17,19,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,17,2,17,19,0,6,14,14,14,12,12,0,0,0,0,15,13,12,12,12,12,14,14,15,13,15,13,3,1,3,1,2,2,0,16,18,18,16,0,0,0,0,21,22,22,21,20,23,23,20,1,0,10,6,0,4,4,0,0,0,0,0,0,12,12,12,12,12,12,0,0,16,18,22,23,22,23,0,0,2,14,16,0,0,0,0,0,0,0,0,12,12,1,1,3,15,13,3,2,2,2,2,12,12,18,16,2,2,0,0,12,12,2,2,19,17,2,14,19,17,2,6,10,16,18,0,0,10,10,19,17,2,2,14,14,5,5,0,12,18,16,19,17,14,14,0,16,0,0,2,0,0,0,0,0,0,1,1,12,12,12,12,13,15,2,2,2,2,0,16,19,4,16,16,16,0,0,0,0,0,0,0,10,0,0,14,0,2,0,12],"BP1":null,"BP2":null,"BCI":[30,30,31,31,30,30,31,31,31,31,31,31,31,31,31,31,31,31,0,0,31,0,0,31,0,0,31,31,31,31,31,31,30,30,30,30,30,30,30,30,31,31,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,31,31,31,31,0,0,31,31,31,31,0,0,31,31,31,31,0,0,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,29,29,29,29,0,31,0,31,31,31,31,31,31,31,31,31,31,29,31,31,31,31,31,0,0,29,29,31,31,31,31,31,31,31,31,31,31,31,31,29,29,29,29,0,0,31,31,31,29,29,29,29,29,29,29,29,31,31,31,30,30,30,30,31,31,0,31,31,31,31,31,31,30,30,31,31,31,31,0,0,31,31,31,31,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,30,0,0,0,0,0,0,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,31,31,29,0,0,0,31,0,0,0,31,31,31,31,0],"BEI":null,"BlockData":"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","VehicleData":"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","designChanged":false,"blueprintVersion":27,"blueprintName":"Mouse Aim Demonstrator","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":159,"LocalPosition":"-29569.55,106.5956,48650.22","LocalRotation":"-0.09756975,0.3602467,0.162174,-0.9134562","ForceId":1561218651,"TotalBlockCount":441,"MaxCords":"10,3,22","MinCords":"-10,-2,-4","BlockIds":[1466,1462,845,845,1466,1462,845,845,874,878,850,850,855,858,875,851,875,839,932,956,851,162,927,838,933,952,879,851,838,879,845,845,1464,1464,1463,1463,1459,1459,1460,1460,846,847,844,844,828,829,845,845,828,829,849,849,874,874,878,166,166,849,849,845,856,859,875,879,269,269,265,265,265,265,240,240,856,859,559,559,559,559,1222,1222,1222,1469,560,560,560,560,842,875,875,840,1463,1666,851,871,867,874,878,844,844,843,843,849,849,844,844,843,843,849,849,865,869,849,849,849,849,869,865,849,849,98,1623,1623,1623,1623,560,560,560,560,1461,1461,1465,1465,1465,1465,1461,1461,1221,167,615,1666,643,843,843,559,559,881,881,1460,1460,843,843,1459,1459,1463,1463,1464,1464,1623,1623,1621,1621,1621,1621,120,120,881,850,878,67,67,67,67,67,67,67,67,1615,1614,1615,815,814,815,814,1614,239,280,239,280,855,858,849,849,812,813,166,166,1625,1625,287,287,1228,1228,1222,1228,1215,1216,1228,1023,1022,1616,1616,843,843,844,844,1620,1620,820,821,821,820,1606,1606,120,845,846,847,856,859,871,867,115,839,65,65,621,130,130,845,845,845,845,700,769,241,241,1623,1623,843,843,411,414,414,414,643,696,760,110,1611,1611,1611,838,839,851,559,559,65,334,136,333,342,358,333,843,843,969],"BlockState":"=0,276","AliveCount":276,"BlockStringData":["local Accumulator = {}\r\nlocal Differ = {}\r\nlocal LinkedList = {}\r\nlocal MathUtil = {}\r\nlocal RingBuffer = {}\r\nlocal Control = {}\r\nlocal Nav = {}\r\nlocal Targeting = {}\r\nlocal BlockUtil = {}\r\nlocal Combat = {}\r\n\r\n-- Settings\r\n-- Flight Settings\r\n-- full roll will point top of aircraft towards desired direction\r\n  -- actual roll will be error angle / fullRollAngle\r\n  -- times the full roll, capped at 1\r\nlocal fullRollRate = 40\r\nlocal fullRollAngle = 40\r\n\r\nlocal autoAimAngle = 5.5\r\nlocal autoFireRange = 2000\r\nlocal lockRange = 3000\r\nlocal maxFireAngle = 5\r\nlocal mainWeaponName = \"cannons\"\r\n\r\n-- trim in case of unbalanced aircraft (yaw/pitch/roll)\r\n  -- in breadboards and lua, positive pitch is pitch down\r\nlocal trim = {yaw = 0, pitch = 0, roll = 0}\r\n\r\n-- PIDFF constants\r\n--[[\r\n  Tides uses the parallel form of PID, i.e. K_p * e(t) + K_i * integral of e(t) + K_d * d/dt e(t),\r\n  whereas stock PIDs use the standard form, i.e. K_p * [e(t) + 1/T_i * integral of e(t) + T_d * d/dt e(t)].\r\n  To convert from standard form coefficients to parallel form coefficients,\r\n  K_p remains the same,\r\n  K_d = T_d * K_p,\r\n  K_i = K_p / T_i\r\n\r\n  to deal with global/local coordinate\r\n  issues, the feedforward controllers\r\n  will receive the desired angular\r\n  velocity instead of the direction\r\n--]]\r\nlocal yawS   = {  P = 0.025,\r\n                  I = 0.05,\r\n                  D = 0.02,\r\n                  IDecay = 0.125, -- set IDecay to 1 to match stock PID behavior\r\n                  V = 0.001, -- advanced: feedforward constants. set to 0 for stock PID behavior\r\n                  A = 0,\r\n                  FFwindow = 0.2,\r\n                  FFdecay = 0.2  }\r\nlocal pitchS = {  P = 0.04,\r\n                  I = 0.1,\r\n                  D = 0.015,\r\n                  IDecay = 0.125,\r\n                  V = 0.004,\r\n                  A = 0,\r\n                  FFwindow = 0.2,\r\n                  FFdecay = 0.2  }\r\nlocal rollS  = {  P = 0.03,\r\n                  I = 0,\r\n                  D = 0.01,\r\n                  IDecay = 0.125,\r\n                  V = 0,\r\n                  A = 0,\r\n                  FFwindow = 0.2,\r\n                  FFdecay = 0.2  }\r\n\r\n-- Cockpit Settings\r\n--[[\r\n  the amount by which the chair shifts rambot's head relative to the center\r\n  of the cockpit.\r\n  the camera position in the chair is not centered. I suspect it was placed\r\n  by hand. These values are simply my best guess.\r\n  Normally (-0.01, 1, 0.09) from the chair center, (-0.01, 1.68, 0.09) for elevated\r\n]]--\r\nlocal chairOffset = Vector3(-0.009, 0, 0)\r\n\r\n-- shifts crosshairs to compensate for non-centered images\r\nlocal hologramOffset = Vector3(0, 0, 0)\r\n\r\n-- distance from camera to HUD\r\nlocal hudDistance = 0.4\r\n\r\n-- the name of the spinblocks that stabilize the chair\r\nlocal chairSpinblockNames = { yaw = \"yawSeat\",\r\n                              pitch = \"pitchSeat\",\r\n                              roll = \"rollSeat\" }\r\n\r\n-- the name of the weapon used to steer the craft\r\nlocal steeringWepName = \"joystick\"\r\n\r\n-- \"leading\" mode will tell you where to shoot\r\n  -- \"trailing\" mode will tell you where you'll hit if you shoot now\r\nlocal sightMode = \"trailing\"\r\n\r\nlocal sightProjNames = {  aim = \"aimProjector\",\r\n                          lead = \"leadProjector\",\r\n                          lock = \"lockProjector\"  }\r\n\r\n-- shell velocity of your cannon\r\nlocal muzzle = 1129\r\n\r\n-- averaging time and decay rate for acceleration tracking\r\n  -- set accelAvgTime to 0 to ignore acceleration\r\nlocal accelAvgTime = 0.2\r\nlocal accelDecay = 0.1\r\n\r\nlocal steerAvgTime = 0.125\r\nlocal steerDecay = 0.0625\r\n\r\n-- misc variables\r\nlocal timeDiff\r\nlocal velDiff\r\nlocal pointDiff, pointAcc\r\nlocal rollDiff\r\nlocal rollAcc, pitchAcc, yawAcc\r\nlocal target\r\nlocal accelAcc\r\nlocal pitchPID, pitchFF\r\nlocal yawPID, yawFF\r\nlocal rollPID, rollFF\r\nlocal proj = {}\r\nlocal lastDir\r\nlocal gunOffset\r\n\r\nlocal steeringWep\r\nlocal mainWeps\r\nlocal chairSpinblocks = {}\r\nlocal inited = false\r\nlocal DEBUG = true\r\n\r\nfunction Init(I)\r\n  for block, name in pairs(chairSpinblockNames) do\r\n    chairSpinblocks[block] = BlockUtil.getSubConstructsByName(I, name, 1)[1]\r\n  end\r\n  steeringWep = BlockUtil.getWeaponsByName(I, steeringWepName, 1)[1]\r\n  mainWeps = BlockUtil.getWeaponsByName(I, mainWeaponName, -1)\r\n  gunOffset = Vector3.zero\r\n  for i, wep in ipairs(mainWeps) do\r\n    local info = BlockUtil.getWeaponInfo(I, wep)\r\n    gunOffset = gunOffset + info.LocalFirePoint\r\n  end\r\n  gunOffset = gunOffset / #mainWeps - I:GetSubConstructInfo(chairSpinblocks.roll).LocalPosition - Vector3.forward\r\n\r\n  for p, name in pairs(sightProjNames) do\r\n    proj[p] = BlockUtil.getBlocksByName(I, sightProjNames[p], 33, 1)[1]\r\n  end\r\n\r\n  timeDiff = Differ.Differ(I:GetGameTime())\r\n  velDiff = Differ.Differ(Vector3.zero)\r\n  if accelAvgTime > 0 then\r\n    accelAcc = Accumulator.Accumulator(accelAvgTime, accelDecay)\r\n  end\r\n\r\n  pointDiff = Differ.Differ(I:GetConstructForwardVector())\r\n  if steerAvgTime > 0 then\r\n    pointAcc = Accumulator.Accumulator(steerAvgTime, steerDecay)\r\n  end\r\n  rollDiff = Differ.Differ(0)\r\n  yawAcc = Accumulator.Accumulator(yawS.FFwindow, yawS.FFdecay)\r\n  pitchAcc = Accumulator.Accumulator(pitchS.FFwindow, pitchS.FFdecay)\r\n  rollAcc = Accumulator.Accumulator(rollS.FFwindow, rollS.FFdecay)\r\n\r\n  pitchPID = Control.PID(pitchS.P, pitchS.I, pitchS.D, pitchS.IDecay, 0, 360)\r\n  yawPID = Control.PID(yawS.P, yawS.I, yawS.D, yawS.IDecay, 0, 360)\r\n  rollPID = Control.PID(rollS.P, rollS.I, rollS.D, rollS.IDecay, 0, 360)\r\n  pitchFF = Control.FF({pitchS.V, pitchS.A})\r\n  yawFF = Control.FF({yawS.V, yawS.A})\r\n  rollFF = Control.FF({rollS.V, rollS.A})\r\nend\r\n\r\nfunction Update(I)\r\n  if not inited then\r\n    Init(I)\r\n    inited = true\r\n    return\r\n  end\r\n\r\n  local elapsedTime = Differ.update(timeDiff, I:GetGameTime())\r\n\r\n  RotateSeat(I)\r\n\r\n  local oldTarget = target\r\n  target = Combat.pickTarget(I, 0, Priority)\r\n  if not target or (oldTarget and oldTarget.Id ~= target.Id) then\r\n    SwapTarget(target)\r\n  end\r\n\r\n  if target and accelAvgTime > 0 then\r\n    local dv = Differ.update(velDiff, target.Velocity) / elapsedTime\r\n    Accumulator.update(accelAcc, dv, elapsedTime)\r\n  end\r\n  Sight(I, target)\r\n  Steer(I)\r\nend\r\n\r\nfunction Priority(I, t)\r\n  local relPos = t.Position - I:GetConstructPosition()\r\n  local rangePenalty = 0\r\n  if relPos.magnitude > lockRange then rangePenalty = 1000000 end\r\n  return -Vector3.Angle(relPos, BlockUtil.getWeaponInfo(I, steeringWep).CurrentDirection) - rangePenalty\r\nend\r\n\r\nfunction RotateSeat(I)\r\n  local av = I:GetLocalAngularVelocity() * Differ.get(timeDiff)\r\n  I:SetSpinBlockRotationAngle(chairSpinblocks.yaw, -I:GetConstructYaw() - Mathf.Rad2Deg * av.y)\r\n  I:SetSpinBlockRotationAngle(chairSpinblocks.pitch, I:GetConstructPitch() + Mathf.Rad2Deg * av.x)\r\n  I:SetSpinBlockRotationAngle(chairSpinblocks.roll, -I:GetConstructRoll() - Mathf.Rad2Deg * av.z)\r\nend\r\n\r\nfunction PositionReticle(I, aim, lead, lock)\r\n  local rotation = Quaternion.LookRotation(I:GetConstructForwardVector(), I:GetConstructUpVector())\r\n  local invRot = Quaternion.Inverse(rotation)\r\n  local seatPosition = I:GetSubConstructInfo(chairSpinblocks.roll).Position\r\n  local seatPosLoc = invRot * (seatPosition - I:GetConstructPosition())\r\n  local fw = I:GetConstructForwardVector()\r\n  seatPosLoc = seatPosLoc + 0.5 * Vector3.forward\r\n  local vecs = {aim = aim, lead = lead, lock = lock}\r\n  local r = (Mathf.Repeat(I:GetConstructRoll() + 90, 180) - 90)\r\n  for p, id in pairs(proj) do\r\n    vecs[p] = vecs[p] + Quaternion.AngleAxis(-r, Vector3.forward) * hologramOffset\r\n    if vecs[p].z >= 0 then\r\n      vecs[p].z = 0\r\n      local info = I:Component_GetBlockInfo(33, id)\r\n      local infoPosLoc = invRot * (info.Position - I:GetConstructPosition())\r\n      local dest = (vecs[p] + hudDistance * Vector3.forward).normalized * hudDistance + seatPosLoc\r\n      local diff = dest - infoPosLoc\r\n      I:Component_SetBoolLogic(33, id, true)\r\n      I:Component_SetFloatLogic_1(33, id, 2, diff.z)\r\n      I:Component_SetFloatLogic_1(33, id, 3, diff.x)\r\n      I:Component_SetFloatLogic_1(33, id, 4, diff.y)\r\n      I:Component_SetFloatLogic_1(33, id, 5, Mathf.Atan2(vecs[p].x, hudDistance) * Mathf.Rad2Deg)\r\n      I:Component_SetFloatLogic_1(33, id, 6, Mathf.Atan2(-vecs[p].y, hudDistance) * Mathf.Rad2Deg)\r\n      I:Component_SetFloatLogic_1(33, id, 7, -r)\r\n    else\r\n      I:Component_SetBoolLogic(33, id, false)\r\n    end\r\n  end\r\nend\r\n\r\nfunction Sight(I, target)\r\n  local fw = I:GetConstructForwardVector()\r\n  local rotation = Quaternion.LookRotation(fw, I:GetConstructUpVector())\r\n  local invRot = Quaternion.Inverse(rotation)\r\n  local offset = invRot * chairOffset\r\n  local sw = BlockUtil.getWeaponInfo(I, steeringWep)\r\n  local pointing = sw.CurrentDirection\r\n  local pLoc = invRot * pointing\r\n  local leadOffset = Vector3(0, 0, -1)\r\n  local lockOffset = Vector3(0, 0, -1)\r\n  local aimDir = MathUtil.clampCone(Vector3.forward, pLoc, maxFireAngle)\r\n  local aimOffset = offset + hudDistance * aimDir / aimDir.z\r\n  if target then\r\n    local headPos = I:GetSubConstructInfo(chairSpinblocks.roll).Position + fw\r\n    local relPos = target.Position - headPos\r\n    local relVel = target.Velocity - I:GetVelocityVector()\r\n    local grav = I:GetGravityForAltitude(I:GetConstructPosition().y)\r\n    local ac, w\r\n    if accelAvgTime > 0 then ac, w = Accumulator.get(accelAcc) else ac, w = Vector3.zero, 1 end\r\n    local accel = ac / w - grav\r\n    local a, b = MathUtil.solveQuadratic(0.5 * accel.magnitude, muzzle + relVel.magnitude, -relPos.magnitude)\r\n    local minTTT\r\n    if not b then minTTT = a\r\n    elseif a > 0 and (a < b or b < 0) then minTTT = a\r\n    elseif b > 0 and (b < a or a < 0) then minTTT = b end\r\n    minTTT = minTTT or 0\r\n    a, b = MathUtil.solveQuadratic(-0.5 * accel.magnitude, muzzle - relVel.magnitude, -relPos.magnitude)\r\n    local maxTTT\r\n    if not b then maxTTT = a\r\n    elseif a > 0 and (a < b or b < 0) then maxTTT = a\r\n    elseif b > 0 and (b < a or a < 0) then maxTTT = b end\r\n    maxTTT = maxTTT or (1/0) --infinity\r\n    local t = Targeting.secondOrderTargetingTime(I, relPos + gunOffset, relVel, accel, muzzle, minTTT, maxTTT)\r\n    if t then I:LogToHud(t) end\r\n    lockOffset = invRot * relPos / Mathf.Abs(Vector3.Dot(relPos, fw)) * (hudDistance - offset.z)\r\n    if t then\r\n      local enemyPosition = relPos + t * relVel + 0.5 * t * t * accel\r\n      if Vector3.Angle(fw, enemyPosition) < autoAimAngle\r\n       and enemyPosition.magnitude < autoFireRange then\r\n        local headLoc = invRot * (headPos - I:GetConstructPosition())\r\n        local optPointing = (enemyPosition - rotation * gunOffset).normalized\r\n        for i, wep in ipairs(mainWeps) do\r\n          local info = BlockUtil.getWeaponInfo(I, wep)\r\n          if not info.PlayerCurrentlyControllingIt then\r\n            local diff = enemyPosition + rotation * (headLoc - info.LocalFirePoint)\r\n            diff = MathUtil.clampCone(I:GetConstructForwardVector(), diff, maxFireAngle)\r\n            aimDir = invRot * optPointing\r\n            pointing = optPointing\r\n            BlockUtil.aimWeapon(I, wep, diff, 0)\r\n            BlockUtil.fireWeapon(I, wep, 0)\r\n          end\r\n        end\r\n      end\r\n      if sightMode == \"trailing\" then\r\n        pointing = MathUtil.clampCone(I:GetConstructForwardVector(), pointing, maxFireAngle)\r\n        local shellPosition = t * (muzzle * pointing - relVel) + 0.5 * t * t * (-accel)\r\n        local shellPosLoc = invRot * shellPosition + gunOffset\r\n\r\n        leadOffset = offset + (hudDistance - offset.z) / Mathf.Abs(shellPosLoc.z) * shellPosLoc\r\n      elseif sightMode == \"leading\" then\r\n        local enemyPosLoc = invRot * enemyPosition\r\n\r\n        leadOffset = offset + (hudDistance - offset.z) / Mathf.Abs(enemyPosLoc.z) * enemyPosLoc\r\n      end\r\n      aimOffset = offset + (hudDistance - offset.z) / relPos.magnitude * gunOffset + hudDistance * aimDir / aimDir.z\r\n    end\r\n  end\r\n  aimOffset.z = 0\r\n  PositionReticle(I, aimOffset, leadOffset, lockOffset)\r\nend\r\n\r\nfunction Steer(I)\r\n  I:TellAiThatWeAreTakingControl()\r\n\r\n  local pointing\r\n  local cWep = BlockUtil.getWeaponInfo(I, steeringWep)\r\n  local elapsedTime = Differ.get(timeDiff)\r\n  if cWep.PlayerCurrentlyControllingIt then\r\n    lastDir = nil\r\n    if steerAvgTime > 0 then\r\n      local wt\r\n      pointing, wt = Accumulator.update(pointAcc, cWep.CurrentDirection, elapsedTime)\r\n      pointing = pointing / wt\r\n    else\r\n      pointing = cWep.CurrentDirection\r\n    end\r\n  else\r\n    if not lastDir then\r\n      lastDir = I:GetConstructForwardVector()\r\n      lastDir.y = 0\r\n      lastDir = lastDir.normalized\r\n    end\r\n    pointing = lastDir\r\n  end\r\n\r\n\r\n  local fw = I:GetConstructForwardVector()\r\n  local yawE = MathUtil.angleOnPlane(fw, pointing, I:GetConstructUpVector())\r\n  local pitchE = MathUtil.angleOnPlane(fw, pointing, I:GetConstructRightVector())\r\n\r\n  local pointDel = Differ.update(pointDiff, pointing) / elapsedTime\r\n  local pointVel = Vector3.Cross(pointing, pointDel) * Mathf.Rad2Deg\r\n\r\n  local r, wt\r\n  r, wt = Accumulator.update(yawAcc,\r\n    Vector3.Dot(pointVel, I:GetConstructUpVector()),\r\n    elapsedTime)\r\n  local yawRate = r / wt\r\n  r, wt = Accumulator.update(pitchAcc,\r\n    Vector3.Dot(pointVel, I:GetConstructRightVector()),\r\n    elapsedTime)\r\n  local pitchRate = r / wt\r\n\r\n  local rollScale = Mathf.Min(1, Vector3.Angle(pointing, fw) / fullRollAngle)\r\n  local trs = rollScale * rollScale\r\n  local pra = rollScale * rollScale * MathUtil.angleOnPlane(Vector3.up, pointing, I:GetConstructForwardVector())\r\n  rollScale = Mathf.Min(1, pointVel.magnitude / fullRollRate)\r\n  local rra = rollScale * rollScale * MathUtil.angleOnPlane(Vector3.up, pointDel, I:GetConstructForwardVector())\r\n  trs = trs + rollScale * rollScale\r\n  local desiredRoll = (pra + rra) / Mathf.Max(1, trs) \r\n  if desiredRoll ~= desiredRoll then desiredRoll = 0 end\r\n  local rollE = desiredRoll - I:GetConstructRoll()\r\n  if rollE < -180 then\r\n    rollE = rollE + 360\r\n  elseif rollE > 180 then\r\n    rollE = rollE - 360\r\n  end\r\n\r\n  r, wt = Accumulator.update(rollAcc,\r\n    Differ.update(rollDiff, desiredRoll) / elapsedTime,\r\n    elapsedTime)\r\n  local rollRate = r / wt\r\n\r\n  --steering\r\n  local yaw = Control.processPID(yawPID, yawE, elapsedTime)\r\n              + Control.processFF(yawFF, yawRate, elapsedTime)\r\n  local pitch = Control.processPID(pitchPID, pitchE, elapsedTime)\r\n              + Control.processFF(pitchFF, pitchRate, elapsedTime)\r\n  local rollpid, rollff = Control.processPID(rollPID, rollE, elapsedTime)\r\n              , Control.processFF(rollFF, rollRate, elapsedTime)\r\n\r\n  local roll = rollpid + rollff\r\n\r\n  --positive: yaw right, pitch down, roll left\r\n  I:RequestControl(2, 2, roll + trim.roll)\r\n  I:RequestControl(2, 5, pitch + trim.pitch)\r\n  I:RequestControl(2, 1, yaw + trim.yaw)\r\nend\r\n\r\nfunction SwapTarget(newTarget)\r\n  target = newTarget\r\n  velDiff = Differ.Differ(newTarget and newTarget.Velocity or Vector3.zero)\r\n  accelAcc = Accumulator.Accumulator(accelAvgTime, accelDecay)\r\nend\r\n\r\nfunction Accumulator.Accumulator(window, decay)\r\n  local acc = {}\r\n  acc.decay = decay\r\n  acc.window = window\r\n  acc.time = 0\r\n  acc.weight = 0\r\n  if window > 0 then\r\n    acc.vals = LinkedList.LinkedList()\r\n    acc.times = LinkedList.LinkedList()\r\n  end\r\n  return acc\r\nend\r\n\r\nfunction Accumulator.update(acc, value, time)\r\n  local decayFac = Mathf.Pow(acc.decay, time)\r\n  if not acc.value then\r\n    acc.value = value * time\r\n  else\r\n    acc.value = acc.value * decayFac\r\n    acc.value = acc.value + value * time\r\n  end\r\n  acc.time = acc.time + time\r\n  acc.weight = acc.weight * decayFac\r\n  acc.weight = acc.weight + time\r\n  if acc.window > 0 then\r\n    LinkedList.pushFront(acc.vals, value)\r\n    LinkedList.pushFront(acc.times, time)\r\n    while acc.time > acc.window do\r\n      local t = LinkedList.popBack(acc.times)\r\n      acc.time = acc.time - t\r\n      local d = Mathf.Pow(acc.decay, acc.time)\r\n      acc.weight = acc.weight - t * d\r\n      acc.value = acc.value - LinkedList.popBack(acc.vals) * t * d\r\n    end\r\n  end\r\n  return acc.value, acc.weight\r\nend\r\n\r\nfunction Accumulator.get(acc)\r\n  return acc.value, acc.weight\r\nend\r\n\r\nfunction Differ.Differ(initial)\r\n  local differ = {}\r\n  differ.lastVal = initial\r\n  differ.diff = nil\r\n  return differ\r\nend\r\n\r\nfunction Differ.update(differ, value)\r\n  if differ.lastVal then\r\n    differ.diff = value - differ.lastVal\r\n    differ.lastVal = value\r\n  end\r\n  differ.lastVal = value\r\n  return differ.diff\r\nend\r\n\r\nfunction Differ.get(differ)\r\n  return differ.diff\r\nend\r\n\r\nfunction LinkedList.LinkedList()\r\n  local llelem = {}\r\n  llelem.value = nil\r\n  llelem.next = llelem\r\n  llelem.prev = llelem\r\n  return llelem\r\nend\r\n\r\nfunction LinkedList.pushFront(lst, value)\r\n  local llelem = {}\r\n  llelem.value = value\r\n  LinkedList.connect(llelem, lst.next)\r\n  LinkedList.connect(lst, llelem)\r\nend\r\n\r\nfunction LinkedList.pushBack(lst, value)\r\n  local llelem = {}\r\n  llelem.value = value\r\n  LinkedList.connect(lst.prev, llelem)\r\n  LinkedList.connect(llelem, lst)\r\nend\r\n\r\nfunction LinkedList.popFront(lst)\r\n  local val = lst.next.value\r\n  LinkedList.connect(lst, lst.next.next)\r\n  return val\r\nend\r\n\r\nfunction LinkedList.popBack(lst)\r\n  local val = lst.prev.value\r\n  LinkedList.connect(lst.prev.prev, lst)\r\n  return val\r\nend\r\n\r\nfunction LinkedList.peekFront(lst)\r\n  return lst.next.val\r\nend\r\n\r\nfunction LinkedList.peekBack(lst)\r\n  return lst.prev.val\r\nend\r\n\r\nfunction LinkedList.connect(e1, e2)\r\n  e1.next = e2\r\n  e2.prev = e1\r\nend\r\n\r\nfunction LinkedList.toArray(lst)\r\n  local i = 1\r\n  local arr = {}\r\n  local llelem = lst.next\r\n  while llelem ~= lst do\r\n    arr[i] = llelem.value\r\n    llelem = llelem.next\r\n  end\r\n  return arr\r\nend\r\n\r\nfunction MathUtil.angleOnPlane(from, to, planeNormal)\r\n  local f = Vector3.ProjectOnPlane(from, planeNormal)\r\n  local t = Vector3.ProjectOnPlane(to, planeNormal)\r\n  return Vector3.SignedAngle(f, t, planeNormal)\r\nend\r\n\r\nfunction MathUtil.min(set, comp)\r\n  local min = nil\r\n  comp = comp or function(a, b) return a < b end\r\n  for ele in set do\r\n    if not min or comp(ele, min) then\r\n      min = ele\r\n    end\r\n  end\r\n  return min\r\nend\r\n\r\nfunction MathUtil.max(set, comp)\r\n  local max = nil\r\n  comp = comp or function(a, b) return a < b end\r\n  for ele in set do\r\n    if not max or comp(max, ele) then\r\n      max = ele\r\n    end\r\n  end\r\n  return max\r\nend\r\n\r\nfunction MathUtil.range(a, b, c)\r\n  local start, stop = a, b\r\n  local step\r\n  if not a then return end\r\n  if not b then\r\n    start = 0\r\n    stop = a\r\n    step = start < stop and 1 or -1\r\n  elseif c then\r\n    step = c\r\n  end\r\n  return function(_, last)\r\n    local next = last + step\r\n    if next == stop then return nil end\r\n    return next\r\n  end, nil, start - step\r\nend\r\n\r\nfunction MathUtil.angleSSS(a, b, c)\r\n  if (a + b < c) or (a + c < b) or (b + c < a) then return nil end\r\n  local A = Mathf.Acos((b * b + c * c - a * a) / (2 * b * c)) * Mathf.Rad2Deg\r\n  local B, C = MathUtil.angleSAS(b, A, c)\r\n  return A, B ,C\r\nend\r\n\r\nfunction MathUtil.sideSAS(a, C, b)\r\n  local csq = a * a + b * b - 2 * a * b * Mathf.Cos(C * Mathf.Deg2Rad)\r\n  return Mathf.Sqrt(csq)\r\nend\r\n\r\nfunction MathUtil.angleSAS(a, C, b)\r\n  local c = MathUtil.sideSAS(a, C, b)\r\n  if MathUtil.isZero(c) then return nil end\r\n  local A, B\r\n  if a < b then\r\n    A = MathUtil.angleLoSin(c, a, C)\r\n    B = 180 - A - C\r\n  else\r\n    B = MathUtil.angleLoSin(c, b, C)\r\n    A = 180 - B - C\r\n  end\r\n  return A, B\r\nend\r\n\r\nfunction MathUtil.sideSSA(a, b, A)\r\n  local q0 = b * b - a * a\r\n  local q1 = -2 * b * Mathf.Cos(A * Mathf.Deg2Rad)\r\n  local c1, c2 = MathUtil.solveQuadratic(q0, q1, 1)\r\n  if c1 < c2 then return c1, c2 end\r\n  return c2, c1\r\nend\r\n\r\nfunction MathUtil.angleSSA(a, b, A)\r\n  local c1, c2 = MathUtil.sideSSA(a, b, A)\r\n  if not c1 then return nil end\r\n  local B1, C1 = MathUtil.angleSAS(b, A, c1)\r\n  if not c2 then return B1, C1 end\r\n  local B2, C2 = MathUtil.angleSAS(b, A, c2)\r\n  return B1, C1, B2, C2\r\nend\r\n\r\nfunction MathUtil.sideAAS(A, B, a)\r\n  local C = 180 - A - B\r\n  local b = MathUtil.sideLoSin(A, B, a)\r\n  local c = MathUtil.sideLoSin(A, C, a)\r\n  return b, c\r\nend\r\n\r\nfunction MathUtil.sideLoSin(a, A, B)\r\n  return a * Mathf.Sin(B * Mathf.Deg2Rad) / Mathf.Sin(A * Mathf.Deg2Rad)\r\nend\r\n\r\nfunction MathUtil.angleLoSin(a, b, A)\r\n  return Mathf.Asin(b * Mathf.Sin(A * Mathf.Deg2Rad) / a) * Mathf.Rad2Deg\r\nend\r\n\r\nfunction MathUtil.clampCone(v1, v2, angle)\r\n  local offAngle = Mathf.Min(angle, Vector3.Angle(v1, v2))\r\n  local axis = Vector3.Cross(v1, v2)\r\n  return Quaternion.AngleAxis(offAngle, axis) * v1\r\nend\r\n\r\n-- code from lua-polynomials by piqey (John Kushmer) on github\r\n-- https://github.com/piqey/lua-polynomials\r\n-- GNU General Public License, version 3\r\n\r\nlocal eps = 1e-9\r\n\r\n-- checks if d is close enough to 0 to be considered 0 (for our purposes)\r\nfunction MathUtil.isZero(d)\r\n  return (d > -eps and d < eps)\r\nend\r\n\r\n-- fixes an issue with math.pow that returns nan when the result should be a real number\r\nfunction MathUtil.cuberoot(x)\r\n  return (x > 0) and (x ^ (1 / 3)) or -(math.abs(x) ^ (1 / 3))\r\nend\r\n\r\nfunction MathUtil.solveQuadratic(c0, c1, c2)\r\n  local s0, s1\r\n\r\n  local p, q, D\r\n\r\n  -- x^2 + px + q = 0\r\n  p = c1 / (2 * c0)\r\n  q = c2 / c0\r\n\r\n  D = p * p - q\r\n\r\n  if MathUtil.isZero(D) then\r\n    s0 = -p\r\n    return s0\r\n  elseif (D < 0) then\r\n    return\r\n  else -- if (D > 0)\r\n    local sqrt_D = math.sqrt(D)\r\n\r\n    s0 = sqrt_D - p\r\n    s1 = -sqrt_D - p\r\n    return s0, s1\r\n  end\r\nend\r\n\r\nfunction MathUtil.solveCubic(c0, c1, c2, c3)\r\n  local s0, s1, s2\r\n\r\n  local num, sub\r\n  local A, B, C\r\n  local sq_A, p, q\r\n  local cb_p, D\r\n\r\n  -- normal form: x^3 + Ax^2 + Bx + C = 0\r\n  A = c1 / c0\r\n  B = c2 / c0\r\n  C = c3 / c0\r\n\r\n  -- substitute x = y - A/3 to eliminate quadric term: x^3 + px + q = 0\r\n  sq_A = A * A\r\n  p = (1 / 3) * (-(1 / 3) * sq_A + B)\r\n  q = 0.5 * ((2 / 27) * A * sq_A - (1 / 3) * A * B + C)\r\n\r\n  -- use Cardano's formula\r\n  cb_p = p * p * p\r\n  D = q * q + cb_p\r\n\r\n  if MathUtil.isZero(D) then\r\n    if MathUtil.isZero(q) then -- one triple solution\r\n      s0 = 0\r\n      num = 1\r\n      --return s0\r\n    else -- one single and one double solution\r\n      local u = MathUtil.cuberoot(-q)\r\n      s0 = 2 * u\r\n      s1 = -u\r\n      num = 2\r\n      --return s0, s1\r\n    end\r\n  elseif (D < 0) then -- Casus irreducibilis: three real solutions\r\n    local phi = (1 / 3) * math.acos(-q / math.sqrt(-cb_p))\r\n    local t = 2 * math.sqrt(-p)\r\n\r\n    s0 = t * math.cos(phi)\r\n    s1 = -t * math.cos(phi + math.pi / 3)\r\n    s2 = -t * math.cos(phi - math.pi / 3)\r\n    num = 3\r\n    --return s0, s1, s2\r\n  else -- one real solution\r\n    local sqrt_D = math.sqrt(D)\r\n    local u = MathUtil.cuberoot(sqrt_D - q)\r\n    local v = -MathUtil.cuberoot(sqrt_D + q)\r\n\r\n    s0 = u + v\r\n    num = 1\r\n\r\n    --return s0\r\n  end\r\n\r\n  -- resubstitute\r\n  sub = (1 / 3) * A\r\n\r\n  if (num > 0) then s0 = s0 - sub end\r\n  if (num > 1) then s1 = s1 - sub end\r\n  if (num > 2) then s2 = s2 - sub end\r\n\r\n  return s0, s1, s2\r\nend\r\n\r\nfunction MathUtil.solveQuartic(c0, c1, c2, c3, c4)\r\n  local s0, s1, s2, s3\r\n\r\n  local coeffs = {}\r\n  local z, u, v, sub\r\n  local A, B, C, D\r\n  local sq_A, p, q, r\r\n  local num\r\n\r\n  -- normal form: x^4 + Ax^3 + Bx^2 + Cx + D = 0\r\n  A = c1 / c0\r\n  B = c2 / c0\r\n  C = c3 / c0\r\n  D = c4 / c0\r\n\r\n  -- substitute x = y - A/4 to eliminate cubic term: x^4 + px^2 + qx + r = 0\r\n  sq_A = A * A\r\n  p = -0.375 * sq_A + B\r\n  q = 0.125 * sq_A * A - 0.5 * A * B + C\r\n  r = -(3 / 256) * sq_A * sq_A + 0.0625 * sq_A * B - 0.25 * A * C + D\r\n\r\n  if MathUtil.isZero(r) then\r\n    -- no absolute term: y(y^3 + py + q) = 0\r\n    coeffs[3] = q\r\n    coeffs[2] = p\r\n    coeffs[1] = 0\r\n    coeffs[0] = 1\r\n\r\n    local results = {MathUtil.solveCubic(coeffs[0], coeffs[1], coeffs[2], coeffs[3])}\r\n    num = #results\r\n    s0, s1, s2 = results[1], results[2], results[3]\r\n  else\r\n    -- solve the resolvent cubic …\r\n    coeffs[3] = 0.5 * r * p - 0.125 * q * q\r\n    coeffs[2] = -r\r\n    coeffs[1] = -0.5 * p\r\n    coeffs[0] = 1\r\n\r\n    s0, s1, s2 = MathUtil.solveCubic(coeffs[0], coeffs[1], coeffs[2], coeffs[3])\r\n\r\n    -- … and take the one real solution …\r\n    z = s0\r\n\r\n    -- … to build two quadric equations\r\n    u = z * z - r\r\n    v = 2 * z - p\r\n\r\n    if MathUtil.isZero(u) then\r\n      u = 0\r\n    elseif (u > 0) then\r\n      u = math.sqrt(u)\r\n    else\r\n      return\r\n    end\r\n\r\n    if MathUtil.isZero(v) then\r\n      v = 0\r\n    elseif (v > 0) then\r\n      v = math.sqrt(v)\r\n    else\r\n      return\r\n    end\r\n\r\n    coeffs[2] = z - u\r\n    coeffs[1] = q < 0 and -v or v\r\n    coeffs[0] = 1\r\n\r\n    do\r\n      local results = {MathUtil.solveQuadratic(coeffs[0], coeffs[1], coeffs[2])}\r\n      num = #results\r\n      s0, s1 = results[1], results[2]\r\n    end\r\n\r\n    coeffs[2] = z + u\r\n    coeffs[1] = q < 0 and v or -v\r\n    coeffs[0] = 1\r\n\r\n    if (num == 0) then\r\n      local results = {MathUtil.solveQuadratic(coeffs[0], coeffs[1], coeffs[2])}\r\n      num = num + #results\r\n      s0, s1 = results[1], results[2]\r\n    end\r\n\r\n    if (num == 1) then\r\n      local results = {MathUtil.solveQuadratic(coeffs[0], coeffs[1], coeffs[2])}\r\n      num = num + #results\r\n      s1, s2 = results[1], results[2]\r\n    end\r\n\r\n    if (num == 2) then\r\n      local results = {MathUtil.solveQuadratic(coeffs[0], coeffs[1], coeffs[2])}\r\n      num = num + #results\r\n      s2, s3 = results[1], results[2]\r\n    end\r\n  end\r\n\r\n  -- resubstitute\r\n  sub = 0.25 * A\r\n\r\n  if (num > 0) then s0 = s0 - sub end\r\n  if (num > 1) then s1 = s1 - sub end\r\n  if (num > 2) then s2 = s2 - sub end\r\n  if (num > 3) then s3 = s3 - sub end\r\n\r\n  return s0, s1, s2, s3\r\nend\r\n\r\nfunction RingBuffer.RingBuffer(capacity)\r\n  local rb = {}\r\n  rb.buf = {}\r\n  rb.capacity = capacity\r\n  rb.tail = 1\r\n  rb.head = 1\r\n  return rb\r\nend\r\n\r\nfunction RingBuffer.isFull(rb)\r\n  return (rb.head - rb.tail) % rb.capacity == 1\r\nend\r\n\r\nfunction RingBuffer.isEmpty(rb)\r\n  return rb.head == rb.tail\r\nend\r\n\r\nfunction RingBuffer.push(rb, value)\r\n  rb.buf[rb.tail] = value\r\n  if RingBuffer.isFull(rb) then\r\n    rb.head = rb.head % rb.capacity + 1\r\n  end\r\n  rb.tail = rb.tail % rb.capacity + 1\r\nend\r\n\r\nfunction RingBuffer.pop(rb)\r\n  if RingBuffer.isEmpty(rb) then return nil end\r\n  local val = rb.buf[rb.head]\r\n  rb.buf[rb.head] = nil\r\n  rb.head = rb.head % rb.capacity + 1\r\n  return val\r\nend\r\n\r\nfunction Control.PID(kP, kI, kD, IDecay, IWindow, period)\r\n  local pid = {}\r\n  pid.kP = kP\r\n  pid.kI = kI\r\n  pid.kD = kD\r\n  pid.Iacc = Accumulator.Accumulator(IDecay, IWindow)\r\n  if period and period ~= 0 then\r\n    pid.period = period\r\n  end\r\n  return pid\r\nend\r\n\r\nfunction Control.processPID(ctrl, e, time)\r\n  e = ctrl.period and (e + ctrl.period / 2) % ctrl.period - ctrl.period / 2 or e\r\n  local p = ctrl.kP * e\r\n  local i = ctrl.kI * Accumulator.update(ctrl.Iacc, e, time)\r\n  local d = ctrl.kD * (e - (ctrl.lastError or e)) / time\r\n  ctrl.lastError = e\r\n  return p + i + d\r\nend\r\n\r\nfunction Control.FF(coeffs, period)\r\n  local ff = {}\r\n  ff.coeffs = coeffs\r\n  ff.degree = #coeffs - 1\r\n  if period and period ~= 0 then\r\n    ff.period = period\r\n  end\r\n  ff.derivs = {}\r\n  return ff\r\nend\r\n\r\nfunction Control.processFF(ctrl, target, time)\r\n  -- initial value zero but of the same type as target\r\n  local response = 0 * target\r\n  local newVal = target\r\n  -- placeholder non-nil value\r\n  local lastVal = target\r\n  for i = 1, ctrl.degree + 1 do\r\n    lastVal = ctrl.derivs[i]\r\n    ctrl.derivs[i] = newVal\r\n    response = response + ctrl.coeffs[i] * newVal\r\n    if lastVal then\r\n      local diff = newVal - lastVal\r\n      if i == 1 and ctrl.period then\r\n        diff = (diff + ctrl.period / 2) % ctrl.period - ctrl.period / 2\r\n      end\r\n      newVal = diff / time\r\n    else\r\n      break\r\n    end\r\n  end\r\n  return response\r\nend\r\n\r\nfunction Nav.toLocal(gCoords, pos, orient)\r\n  local relCoords = gCoords - pos\r\n  return Quaternion.Inverse(orient) * relCoords\r\nend\r\n\r\nfunction Nav.toGlobal(lCoords, pos, orient)\r\n  local relCoords = orient * lCoords\r\n  return relCoords + pos\r\nend\r\n\r\nfunction Nav.cartToPol(coords)\r\n  local r = coords.magnitude\r\n  local theta = Vector3.SignedAngle(Vector3.forward, coords, Vector3.up)\r\n  local phi = 90 - Vector3.Angle(Vector3.up, coords)\r\n  return Vector3(r, theta, phi)\r\nend\r\n\r\nfunction Nav.cartToCyl(coords)\r\n  local coordsH = Vector3(coords.x, 0, coords.z)\r\n  local rho = coordsH.magnitude\r\n  local phi = Vector3.SignedAngle(Vector3.forward, coords, Vector3.up)\r\n  local z = coords.y\r\n  return Vector3(rho, phi, z)\r\nend\r\n\r\nfunction Nav.polToCart(coords)\r\n  local r, theta, phi = coords.x, coords.y, coords.z\r\n  local x = Mathf.Sin(theta) * Mathf.Cos(phi)\r\n  local y = Mathf.Sin(phi)\r\n  local z = Mathf.Cos(theta) * Mathf.Cos(phi)\r\n  return r * Vector3(x, y, z)\r\nend\r\n\r\nfunction Nav.cylToCart(coords)\r\n  local rho, phi, zCyl = coords.x, coords.y, coords.z\r\n  local x = rho * Mathf.Sin(phi)\r\n  local y = zCyl\r\n  local z = rho * Mathf.Cos(phi)\r\n  return Vector3(x, y, z)\r\nend\r\n\r\nfunction Targeting.firstOrderTargeting(relPos, targetVel, muzzleVel)\r\n  local targetAngle = Vector3.Angle(-relPos, targetVel)\r\n  local firingAngle = MathUtil.angleSSA(muzzleVel.magnitude, targetVel.magnitude, targetAngle)\r\n  return (Quaternion.AngleAxis(firingAngle, Vector3.Cross(relPos, targetVel)) * relPos).normalized\r\nend\r\n\r\nfunction Targeting.secondOrderTargeting(relPos, relVel, accel, muzzle, minRange, maxRange)\r\n  local t = Targeting.secondOrderTargetingTime(relPos, relVel, accel, muzzle, minRange / muzzle, maxRange / muzzle)\r\n  if t and t > 0 then\r\n    return (relPos / t + relVel - 0.5 * accel * t).normalized\r\n  end\r\n  return nil\r\nend\r\n\r\nfunction Targeting.secondOrderTargetingTime(I, relPos, relVel, accel, muzzle, minTime, maxTime)\r\n  local a = 0.25 * accel.sqrMagnitude\r\n  local b = Vector3.Dot(relVel, accel)\r\n  local c = relVel.sqrMagnitude - muzzle * muzzle + Vector3.Dot(relPos, accel)\r\n  local d = 2 * Vector3.Dot(relPos, relVel)\r\n  local e = relPos.sqrMagnitude\r\n  local roots = {MathUtil.solveQuartic(a, b, c, d, e)}\r\n  local t = nil\r\n  for i = 1, 4 do\r\n    if roots[i] then I:Log(roots[i]) end\r\n    if roots[i] and roots[i] > minTime and roots[i] < maxTime then\r\n      if not t or t and roots[i] < t then\r\n        t = roots[i]\r\n      end\r\n    end\r\n  end\r\n  return t\r\nend\r\n\r\nfunction Targeting.AIPPN(gain, relPos, missileVel, targetVel, targetAccel)\r\n  local relVel = targetVel - missileVel\r\n  local closingRate = Vector3.Dot(-relVel, relPos.normalized)\r\n  if closingRate <= 0 then closingRate = 10 end\r\n  local tgo = relPos.magnitude / closingRate\r\n\r\n  local losRot = Vector3.Cross(relPos, relVel) / relPos.sqrMagnitude\r\n  local aRot = Vector3.Cross(relPos, targetAccel) / relPos.sqrMagnitude * tgo / 2\r\n  local omega = losRot + aRot\r\n  local losMotion = Vector3.Cross(omega, relPos.normalized)\r\n\r\n  local accelDir = Vector3.ProjectOnPlane(losMotion, missileVel).normalized\r\n  local accelMag = gain * missileVel.magnitude * omega.magnitude\r\n\r\n  return accelMag * accelDir\r\nend\r\n\r\nfunction Targeting.ATPN(gain, relPos, missileVel, targetVel, targetAccel)\r\n  local relVel = targetVel - missileVel\r\n  local closingRate = -Vector3.Dot(relVel, relPos.normalized)\r\n  if closingRate <= 0 then closingRate = 10 end\r\n\r\n  local losRot = Vector3.Cross(relPos, relVel) / relPos.sqrMagnitude\r\n  local losMotion = Vector3.Cross(losRot, relPos.normalized)\r\n\r\n  local orthoAccel = Vector3.ProjectOnPlane(targetAccel, relPos)\r\n\r\n  return gain * closingRate * losMotion + 0.5 * gain * targetAccel\r\nend\r\n\r\nfunction Targeting.accelToDirection(fwd, latax, time)\r\n  local rotVec = Vector3.Cross(fwd, latax) / fwd.sqrMagnitude * time * Mathf.Rad2Deg\r\n  return Quaternion.AngleAxis(rotVec.magnitude, rotVec) * fwd\r\nend\r\n\r\nfunction BlockUtil.getWeaponsByName(I, name, count, mode)\r\n  if DEBUG then I:Log(\"searching for \"..name) end\r\n  local subcs = I:GetAllSubConstructs()\r\n  local weapons = {}\r\n  count = count or -1\r\n  local c = count\r\n  if not mode or mode == 0 or mode == 2 then\r\n    for i=0, I:GetWeaponCount() - 1 do\r\n      if c == 0 then break end\r\n      if I:GetWeaponBlockInfo(i).CustomName == name then\r\n        table.insert(weapons, {subIdx = nil, wpnIdx = i})\r\n        if DEBUG then I:Log(\"found weapon \"..name..\" on hull, type \"..I:GetWeaponInfo(i).WeaponType) end\r\n        c = c - 1\r\n      end\r\n    end\r\n  end\r\n  if not mode or mode == 1 or mode == 2 then\r\n    for idx=1, #subcs do -- for some reason not an actual table so can't use pairs\r\n      local sub = subcs[idx]\r\n      for i=0, I:GetWeaponCountOnSubConstruct(sub) - 1 do\r\n        if c == 0 then break end\r\n        if I:GetWeaponBlockInfoOnSubConstruct(sub, i).CustomName == name then\r\n          table.insert(weapons, {subIdx = sub, wpnIdx = i})\r\n          if DEBUG then I:Log(\"found weapon \"..name..\" on subobj \"..sub..\", type \"..I:GetWeaponInfo(i).WeaponType) end\r\n          c = c - 1\r\n        end\r\n      end\r\n    end\r\n  end\r\n  if DEBUG then I:Log(\"weapon count: \"..#weapons) end\r\n  return weapons\r\nend\r\n\r\nfunction BlockUtil.getSubConstructsByName(I, name, count)\r\n\tif DEBUG then I:Log(\"searching for \"..name) end\r\n  local subcs = I:GetAllSubConstructs()\r\n  local subobjs = {}\r\n  count = count or -1\r\n  local c = count\r\n  for idx=1, #subcs do\r\n    local sub = subcs[idx]\r\n    if c == 0 then break end\r\n    if I:GetSubConstructInfo(sub).CustomName == name then\r\n      table.insert(subobjs, sub)\r\n      if DEBUG then I:Log(\"found subobj \"..name) end\r\n      c = c - 1\r\n    end\r\n  end\r\n  if DEBUG then I:Log(\"subobj count: \"..#subobjs) end\r\n  return subobjs\r\nend\r\n\r\nfunction BlockUtil.getBlocksByName(I, name, type, count)\r\n\tif DEBUG then I:Log(\"searching for \"..name) end\r\n  local comps = {}\r\n  count = count or -1\r\n  local c = count\r\n  for idx=0, I:Component_GetCount(type) - 1 do\r\n    if c == 0 then break end\r\n    if I:Component_GetBlockInfo(type, idx).CustomName == name then\r\n      table.insert(comps, idx)\r\n      if DEBUG then I:Log(\"found component \"..name) end\r\n      c = c - 1\r\n    end\r\n  end\r\n  if DEBUG then I:Log(\"component count: \"..#comps) end\r\n  return comps\r\nend\r\n\r\nfunction BlockUtil.getWeaponInfo(I, weapon)\r\n  local info\r\n  if weapon.subIdx then\r\n    info = I:GetWeaponInfoOnSubConstruct(weapon.subIdx, weapon.wpnIdx)\r\n  else\r\n    info = I:GetWeaponInfo(weapon.wpnIdx)\r\n  end\r\n  return info\r\nend\r\n\r\nfunction BlockUtil.aimWeapon(I, weapon, dir, slot)\r\n  if weapon.subIdx then\r\n    I:AimWeaponInDirectionOnSubConstruct(weapon.subIdx, weapon.wpnIdx, dir.x, dir.y, dir.z, slot)\r\n  else\r\n    I:AimWeaponInDirection(weapon.wpnIdx, dir.x, dir.y, dir.z, slot)\r\n  end\r\nend\r\n\r\nfunction BlockUtil.fireWeapon(I, weapon, slot)\r\n  if weapon.subIdx then\r\n    I:FireWeaponOnSubConstruct(weapon.subIdx, weapon.wpnIdx, slot)\r\n  else\r\n    I:FireWeapon(weapon.wpnIdx, slot)\r\n  end\r\nend\r\n\r\nfunction Combat.pickTarget(I, mainframe, priorityFunc)\r\n  priorityFunc = priorityFunc or function(_, tar) return tar.Priority end\r\n  local target, priority\r\n  for i in MathUtil.range(I:GetNumberOfTargets(mainframe)) do\r\n    local tar = I:GetTargetInfo(mainframe, i)\r\n    local newPri = priorityFunc(I, tar)\r\n    if not target or newPri > priority then\r\n      target = tar\r\n      priority = newPri\r\n    end\r\n  end\r\n  return target\r\nend\r\n\r\nfunction CheckConstraints(I, direction, wepId, subObjId)\r\n  local con\r\n  if subObjId then\r\n    con = I:GetWeaponConstraintsOnSubConstruct(subObjId, wepId)\r\n  else\r\n    con = I:GetWeaponConstraints(wepId)\r\n  end\r\n  local fore = I:GetConstructForwardVEctor()\r\n  local up = I:GetConstructUpVector()\r\n  local constructRot = Quaternion.LookRotation(fore, up)\r\n  direction = Quaternion.Inverse(constructRot) * direction\r\n  if con.InParentConstructSpace and subObjId then\r\n    local rot = I:GetSubConstructInfo(subObjId).localRotation\r\n    direction = Quaternion.inverse(rot) * direction\r\n  end\r\n  local azi = MathUtil.angleOnPlane(Vector3.forward, direction, Vector3.up)\r\n  local aziDir = direction\r\n  aziDir.z = 0\r\n  local elevation = Mathf.Atan2(direction.z, aziDir.magnitude)\r\n  local aziValid = azi > con.MinAzimuth and azi < con.MaxAzimuth\r\n  local eleValid = elevation > con.MinElevation and elevation < con.MaxElevation\r\n  if con.FlipAzimuth then aziValid = not aziValid end\r\n  if aziValid and eleValid then return true end\r\n  azi = azi + 180\r\n  ele = 180 - ele\r\n  if ele > 180 then ele = ele - 360 end\r\n  if ele < -180 then ele = ele + 360 end\r\n  aziValid = azi > con.MinAzimuth and azi < con.MaxAzimuth\r\n  eleValid = elevation > con.MinElevation and elevation < con.MaxElevation\r\n  if con.FlipAzimuth then aziValid = not aziValid end\r\n  if aziValid and eleValid then return true end\r\n  return false\r\nend\r\n"],"BlockStringDataIds":[227],"GameVersion":"3.2.9.7","PersistentSubObjectIndex":84,"PersistentBlockIndex":298,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"8e7a7c61-60bb-4285-b983-792266e93e0c","CreatorReadableName":"DreekFire","HashV1":"849c218282a388ddfc47f8ab3a3d706d"},"BlockCount":276}}