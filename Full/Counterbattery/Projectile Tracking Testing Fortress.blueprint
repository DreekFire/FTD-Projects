{"FileModelVersion":{"Major":1,"Minor":0},"Name":"Projectile Tracking Testing Fortress","Version":13,"SavedTotalBlockCount":797,"SavedMaterialCost":53149.0,"ContainedMaterialCost":372.596161,"ItemDictionary":{"1028":"9411e401-27da-4546-b805-3334f200f055","332":"f29b1372-f4f3-4305-aa85-5fe214361fb7","1026":"8f9dbf41-6c2d-4e7b-855d-b2432c6942a2","333":"26a604f0-071c-49ca-8a0e-e1d9c959b1c5","354":"3ed4d2a4-62ce-4807-b516-6da685804e1e","4":"438b4494-6746-4223-93a1-3a75b08bd5b6","329":"edd65760-896f-4f6a-ba8c-eb2b072635f4","334":"9d2ff3d6-abc2-4378-b47c-cad42d4af1bc","377":"2c557c38-4136-436a-bae2-c5cd1102690c","388":"56c27d46-39b3-4ac1-b4f7-71c118d8dde9","418":"d661f0e7-7f81-4227-80dd-f93aed873630","910":"e62413c3-e841-4eda-9e2a-ceaec75e8b64","394":"c8fe583a-357b-4fa6-86f1-fc2de639c909","439":"e8d04f75-a134-452e-a04a-af5172d65040","532":"382a7650-2231-4867-96e4-8d97242a4741","1107":"395179c1-37a0-4250-851b-5bc19fd601b6","1106":"049b9d0c-1cb3-4511-be7f-9fad6e0a607e","489":"2e715d3f-349f-41e1-bd89-7f685939d5aa","491":"20100af6-ccd1-41ff-b7b0-5d2f6bb99f85","380":"e6bb2b09-daee-432d-9aff-45fc63d24fca","382":"a56e0dcf-94e4-48a0-b8b9-5e33e0ab69cf","363":"1725c9ed-29fd-438d-97f6-8f645a1865d4","381":"4b334c3f-aafd-440c-9c1f-02a98fd18ab5","367":"10a165d1-1333-4c57-a942-b857542c4b45","342":"c68d0ed7-66d1-42cd-974e-01aa0f36c847","369":"a6edccd7-3ec8-419c-9405-703e8b4bdc8b","344":"62e2b663-c26f-461e-ae26-43068010f993","359":"1bb2d71d-cd5f-4a23-844b-8005dec7bd5c","372":"3e0a0bd7-7805-4e8f-836e-0cbcfee512af","572":"5031a9db-aa48-4903-9b16-75a54f5959ce","562":"db2a5655-6b32-4877-8285-40c6ddc9ba3c","561":"9c09eee2-e4bd-42ea-aaec-43a6d1451db3","558":"b6ac5f2e-907e-4926-88c0-355d30c6b7a5","567":"57c4c674-9c66-4ab7-9067-81477824785d","566":"ef2e81c1-d06d-474f-b12c-14de1702db1b","595":"45ce64f5-86ca-425a-8074-7603cdfc1d4a","570":"139d4b6a-2b6b-4bfa-8d00-1bc8e69923fd","495":"d3924bae-be5a-43a0-be19-64fc7c8d6059","419":"9413049d-a4f7-4c1c-8b8a-d2f1f4c18e53","713":"d5016f16-6431-4e8f-b0cc-5f0f400b151a","734":"91cca4a9-a40f-43eb-9ba5-34c738b03d1f","721":"6ebe5e2b-ef9a-4849-b234-131b25579adf","720":"4b2109f7-abfc-46b7-b752-f9423b6f2e35","733":"6209370e-abeb-4ec1-b523-dc21ea33fe0c","727":"a160804b-15cc-46e2-8ffb-401c2aa01de6","735":"542cacd4-c366-4a76-8d01-4ace6c5ce619","722":"33b65ccc-58a0-487d-8b68-a997a71b0bfe","708":"3bff8428-7481-4847-b00e-f0e49233b86d","724":"99a71734-3128-4535-bb9c-f69de5277f49","416":"5d8870cd-d401-4b52-a3dc-641c02b3b31f","417":"4f87eff7-616b-4663-8f11-cd7a7ddd3649","712":"043e9b00-4a2f-41b8-bf2f-4aaa4442f138","715":"515ee20d-20d8-4195-bea5-213e6f1fd929","711":"267248a3-baaa-4653-83b3-ce478d600b17","732":"e0f9e669-4748-4cde-be95-58e47e094253","709":"819ef76e-1023-4f06-bfb1-96cd3e58ba88","717":"4c24445d-a29b-446e-b03f-29e570e9d47d","714":"01a87958-93cf-4efa-857f-10913b0573d9","726":"da59d582-9254-4091-988e-b670dcabe84a","556":"fb1fb4c7-78e8-47e7-8ff1-34a4afcd10c7","528":"74c982f4-305f-411e-a8b4-d193315ab3bc","544":"c5cec892-2e43-4905-9d28-44fc8ecb5cc7","560":"7dc67bed-fd0f-4145-9525-5840bbcc4822","554":"575187d2-ff5c-4d42-9937-0206cffbd883","555":"9aa6b3c3-2569-473e-9d28-2b2cb17bc7a3","545":"213026bc-fd7a-44e6-b543-a31c219aaef0"},"Blueprint":{"ContainedMaterialCost":372.596161,"CSI":[0.0,0.0,-1.0,0.0,-1.0,0.0,0.0,10569.4794921875,0.01229956466704607,0.0,0.0,0.0,0.0,136499.93602078926,20.58586311340332,1.0,1.0,0.0,1.0,3.0,20.313064575195313,-1.0,0.0,136500.0,1.0,1.0,135000.0,0.0,0.0,0.0,304.5,0.0,0.1,0.1,1.0,1.0,3.0,-1.0,0.0,-1.0,20.58586311340332,-1.0,1.0,0.0,-1.0,0.0,0.0,-1.0,135000.0,135000.0,0.0,780.0,-1.0,2302.0,0.0,-1.0,108.0,0.0,500.0,-1.0,12.0,0.0,0.0,0.0,13.235115051269531,0.0,0.0,0.0,0.0,0.1286948025226593,0.0,0.0,0.0,0.0,1.0,1.0,-1.0,-1.0,-1.0,-1.0],"COL":["0.011764,0,0,0","1,0,0,0.5","0,1,0,0.5","0,0,1,0.5","0.1,0.1,0.1,0.5","0.3,0.3,0.3,0.5","0.5,0.5,0.5,0.5","1,1,1,0.1","1,1,1,0.5","1,1,1,0.99","1,0.921568,0.015686,0.99","0,1,1,0.99","1,0,1,0.99","0.532304,0.92424,0.976154,0.482858","0.624097,0.172987,0.071987,0.558838","0.589444,0.995137,0.300367,0.102439","0.2717,0.865858,0.367956,0.486776","0.639902,0.591997,0.036744,0.032933","0.775841,0.906789,0.151626,0.255117","0.791803,0.770037,0.042215,0.984062","0.691124,0.827073,0.992751,0.725039","0.308429,0.229756,0.46043,0.078918","0.983768,0.814959,0.334567,0.270744","0.611877,0.542545,0.044901,0.943315","0.88138,0.579203,0.104262,0.074014","0.891141,0.224628,0.060396,0.025437","0.345402,0.253313,0.07177,0.618634","0,0,0,0","0.188235,0,0.4,0.5","0.019607,1,1,1","0.980392,1,1,1","0,0,0,1"],"SCs":[{"ContainedMaterialCost":0.0,"CSI":[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0],"COL":null,"SCs":[],"BLP":["0,0,0","0,1,0","0,1,-1","0,0,-1","0,0,-2","1,0,-2","-1,0,-2","1,0,0","-1,0,0","1,0,1","-1,0,1","1,0,2","-1,0,2","1,0,3","-1,0,3","1,0,4","-1,0,4","1,0,-1","-1,0,-1"],"BLR":[0,16,16,16,16,16,18,16,18,16,18,16,18,16,18,16,18,16,18],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"AAAAKgAAACgAAwAAAAAAAAEAAAAAAAACAAAAABIAdiYAAAAZAEIYAAAAGQBdGwEAABkAAAAEAAAWwwEABAAAFkMGAAEBAQAEzczMPQAABCgAAAABAAVsYXNlcgUAADEAAAAkAAwYAAAAAADsFwAAAAAAAQAAAAAAAAIAAAAAAAB2JgAAAAcAQhgAAAAHAF0bAQAAFQABAAQK1yM8AAAEJVykRwIABLxenUoAAAQBAAAAAQAFbGFzZXIGAAAxAAAAJAAMGAAAAAAA7BcAAAAAAAEAAAAAAAACAAAAAAAAdiYAAAAHAEIYAAAABwBdGwEAABUAAQAECtcjPAAABOJd5EcCAARwE51KAAAEAgAAAAEABWxhc2Vy","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAAA=","designChanged":false,"blueprintVersion":0,"blueprintName":"Two Axis Turret","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":545,"LocalPosition":"0,5,11","LocalRotation":"0,0,0,-0.999999","ForceId":0,"TotalBlockCount":19,"MaxCords":"1,1,4","MinCords":"-1,0,-2","BlockIds":[544,570,561,561,561,560,560,554,554,554,554,554,554,554,554,554,554,555,555],"BlockState":"=0,19","AliveCount":19,"BlockStringData":[],"BlockStringDataIds":[],"GameVersion":"3.5.5.30","PersistentSubObjectIndex":7,"PersistentBlockIndex":-1,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"fe5bb7da-f3e9-4d92-acd2-f7002e9544b0","CreatorReadableName":"DreekFire","HashV1":"a5598512ea30c7b3f81210225838b965"},"BlockCount":19}],"BLP":["0,1,-1","-1,1,-1","1,1,-1","-2,1,-1","2,1,-1","-3,1,-1","3,1,-1","-4,1,-1","4,1,-1","-5,1,-1","5,1,-1","-6,1,-1","6,1,-1","-7,1,-1","7,1,-1","-8,1,-1","8,1,-1","-9,1,-1","9,1,-1","-10,1,-1","10,1,-1","-11,1,-1","11,1,-1","-12,1,-1","12,1,-1","-13,1,-1","13,1,-1","-14,1,-1","14,1,-1","-15,1,-1","15,1,-1","-15,1,-5","15,1,-5","-15,1,-9","15,1,-9","-15,1,-13","15,1,-13","-15,1,-17","15,1,-17","-14,1,-17","14,1,-17","-13,1,-17","13,1,-17","-12,1,-17","12,1,-17","-11,1,-17","11,1,-17","-10,1,-17","10,1,-17","-9,1,-17","9,1,-17","-8,1,-17","8,1,-17","-7,1,-17","7,1,-17","-6,1,-17","6,1,-17","-5,1,-17","5,1,-17","-4,1,-17","4,1,-17","-3,1,-17","3,1,-17","-2,1,-17","2,1,-17","-1,1,-17","1,1,-17","0,1,-17","-15,1,3","15,1,3","-15,1,7","15,1,7","-15,1,11","15,1,11","-15,1,15","15,1,15","-14,1,15","14,1,15","-13,1,15","13,1,15","-12,1,15","12,1,15","-11,1,15","11,1,15","-10,1,15","10,1,15","-9,1,15","9,1,15","-8,1,15","8,1,15","-7,1,15","7,1,15","-6,1,15","6,1,15","-5,1,15","5,1,15","-4,1,15","4,1,15","-3,1,15","3,1,15","-2,1,15","2,1,15","-1,1,15","1,1,15","0,1,15","1,1,11","2,1,11","0,1,11","3,1,11","-1,1,11","4,1,11","-2,1,11","1,1,7","5,1,11","-3,1,11","2,1,7","0,1,7","6,1,11","-4,1,11","3,1,7","-1,1,7","7,1,11","-5,1,11","4,1,7","-2,1,7","8,1,11","-6,1,11","1,1,3","5,1,7","-3,1,7","9,1,11","-7,1,11","2,1,3","0,1,3","6,1,7","-4,1,7","10,1,11","-8,1,11","3,1,3","-1,1,3","7,1,7","-5,1,7","11,1,11","-9,1,11","4,1,3","-2,1,3","8,1,7","-6,1,7","12,1,11","-10,1,11","5,1,3","-3,1,3","9,1,7","-7,1,7","13,1,11","-11,1,11","6,1,3","-4,1,3","10,1,7","-8,1,7","14,1,11","-12,1,11","7,1,3","-5,1,3","11,1,7","-9,1,7","-13,1,11","8,1,3","-6,1,3","12,1,7","-10,1,7","-14,1,11","9,1,3","-7,1,3","13,1,7","-11,1,7","10,1,3","-8,1,3","14,1,7","-12,1,7","11,1,3","-9,1,3","-13,1,7","12,1,3","-10,1,3","-14,1,7","13,1,3","-11,1,3","14,1,3","-12,1,3","-13,1,3","-14,1,3","1,1,-5","2,1,-5","0,1,-5","3,1,-5","-1,1,-5","4,1,-5","-2,1,-5","1,1,-9","5,1,-5","-3,1,-5","2,1,-9","0,1,-9","6,1,-5","-4,1,-5","3,1,-9","-1,1,-9","7,1,-5","-5,1,-5","4,1,-9","-2,1,-9","8,1,-5","-6,1,-5","1,1,-13","5,1,-9","-3,1,-9","9,1,-5","-7,1,-5","2,1,-13","0,1,-13","6,1,-9","-4,1,-9","10,1,-5","-8,1,-5","3,1,-13","-1,1,-13","7,1,-9","-5,1,-9","11,1,-5","-9,1,-5","4,1,-13","-2,1,-13","8,1,-9","-6,1,-9","12,1,-5","-10,1,-5","5,1,-13","-3,1,-13","9,1,-9","-7,1,-9","13,1,-5","-11,1,-5","6,1,-13","-4,1,-13","10,1,-9","-8,1,-9","14,1,-5","-12,1,-5","7,1,-13","-5,1,-13","11,1,-9","-9,1,-9","-13,1,-5","8,1,-13","-6,1,-13","12,1,-9","-10,1,-9","-14,1,-5","9,1,-13","-7,1,-13","13,1,-9","-11,1,-9","10,1,-13","-8,1,-13","14,1,-9","-12,1,-9","11,1,-13","-9,1,-13","-13,1,-9","12,1,-13","-10,1,-13","-14,1,-9","13,1,-13","-11,1,-13","14,1,-13","-12,1,-13","-13,1,-13","-14,1,-13","0,2,-17","0,8,-17","0,6,-17","0,2,-16","0,2,-15","0,2,-14","0,2,-13","0,2,-12","0,3,-12","0,3,-13","0,3,-14","1,2,-16","1,2,-15","1,2,-14","1,2,-13","1,2,-12","-1,2,-12","-1,2,-13","-1,2,-14","-1,2,-15","-1,2,-16","-2,3,-16","-2,3,-15","-2,3,-14","-2,3,-13","-2,3,-12","2,3,-12","2,3,-13","2,3,-14","2,3,-15","2,3,-16","1,3,-12","1,3,-13","1,3,-14","1,3,-15","1,3,-16","-1,3,-16","-1,3,-15","-1,3,-14","-1,3,-13","-1,3,-12","-2,2,-16","-2,2,-15","-2,2,-14","-2,2,-13","-2,2,-12","-2,2,-11","2,2,-11","2,2,-12","2,2,-13","2,2,-14","2,2,-15","2,2,-16","4,2,-13","-4,2,-13","2,3,-11","1,3,-11","0,3,-11","-1,3,-11","-2,3,-11","0,2,-11","-1,2,-11","1,2,-11","0,4,-15","0,4,-12","-2,4,-16","2,4,-16","-2,4,-14","2,4,-14","-2,4,-12","2,4,-12","0,3,-16","7,2,-12","-7,2,-12","7,2,-15","-7,2,-15","-15,0,-17","15,0,-17","-14,0,-17","14,0,-17","-14,0,-16","14,0,-16","-15,0,-16","15,0,-16","-14,0,18","14,0,18","-15,0,18","15,0,18","-14,0,17","14,0,17","-15,0,17","15,0,17","-1,5,-16","1,5,-16","-5,5,-16","5,5,-16","-5,5,-15","5,5,-15","-5,5,-14","5,5,-14","-5,5,-13","5,5,-13","-5,5,-12","5,5,-12","-5,5,-11","5,5,-11","-1,5,-11","1,5,-11","-1,5,-12","1,5,-12","-1,5,-13","1,5,-13","-1,5,-14","1,5,-14","-1,5,-15","1,5,-15","0,5,-16","0,5,-13","0,2,-10","-1,2,-10","1,2,-10","-2,2,-10","2,2,-10","-3,2,-10","3,2,-10","-4,2,-10","4,2,-10","-5,2,-10","5,2,-10","-6,2,-10","6,2,-10","-7,2,-10","7,2,-10","-8,2,-10","8,2,-10","-9,2,-10","9,2,-10","-9,2,-11","9,2,-11","-9,2,-12","9,2,-12","-9,2,-13","9,2,-13","-9,2,-14","9,2,-14","-9,2,-15","9,2,-15","-9,2,-16","9,2,-16","-9,2,-17","9,2,-17","-8,2,-17","8,2,-17","-7,2,-17","7,2,-17","-6,2,-17","6,2,-17","-5,2,-17","5,2,-17","-4,2,-17","4,2,-17","-3,2,-17","3,2,-17","-2,2,-17","2,2,-17","-1,2,-17","1,2,-17","0,2,-9","0,2,-7","0,8,-18","0,3,-15","0,9,-17","-10,5,-17","10,5,-17","-10,5,-10","10,5,-10","-9,5,-9","9,5,-9","-9,5,-18","9,5,-18","-15,2,-17","15,2,-17","0,9,-18","-1,9,-17","1,9,-17","0,10,-17","1,8,-17","-1,8,-17","0,9,-16","0,8,-16","0,3,11","1,3,10","-1,3,10","-1,3,11","1,3,11","-1,3,9","-1,3,8","-1,3,7","-1,3,6","-1,3,5","1,3,5","1,3,6","1,3,7","1,3,8","1,3,9","1,4,9","-1,4,8","1,4,7","1,4,5","-1,2,6","-1,2,8","1,2,9","1,2,7","1,2,5","-1,3,4","1,3,4","-1,4,4","-1,2,4","0,3,8","0,3,5","-2,3,5","-2,3,7","-2,3,9","2,3,8","2,3,6","2,3,4","1,4,4","1,4,8","-1,4,9","-1,4,6","1,4,6","-1,4,7","-1,4,5","-2,3,4","-2,3,6","-2,3,8","-1,2,9","-1,2,7","-1,2,5","1,2,4","1,2,6","1,2,8","2,3,9","2,3,7","2,3,5","1,3,3","-1,3,2","1,3,1","-1,3,0","-1,3,1","1,3,2","-1,3,3","-2,3,3","-2,3,1","2,3,2","2,3,0","1,3,0","1,4,0","1,4,2","1,2,0","1,2,2","-1,2,1","-1,2,3","-1,4,1","-1,4,3","0,2,11","0,4,10","0,2,-8","-2,3,-6","-2,3,-5","-2,3,-4","-2,3,-3","-2,3,-2","-2,3,-1","-1,2,-6","-1,2,-5","-1,2,-4","-1,2,-3","-1,2,-2","-1,2,-1","-1,3,-6","-1,3,-5","-1,3,-4","-1,3,-3","-1,3,-2","-1,3,-1","-1,4,-6","-1,4,-5","-1,4,-4","-1,4,-3","-1,4,-2","-1,4,-1","0,3,-5","0,3,-2","1,2,-6","1,2,-5","1,2,-4","1,2,-3","1,2,-2","1,2,-1","1,3,-6","1,3,-5","1,3,-4","1,3,-3","1,3,-2","1,3,-1","1,4,-6","1,4,-5","1,4,-4","1,4,-3","1,4,-2","1,4,-1","2,3,-6","2,3,-5","2,3,-4","2,3,-3","2,3,-2","2,3,-1","-2,-4,-17","-2,-4,-13","-2,-4,-9","-2,-3,-16","-2,-3,-14","-2,-3,-13","-2,-3,-11","-2,-3,-9","-2,-2,-17","-2,-2,-16","-2,-2,-15","-2,-2,-14","-2,-2,-13","-2,-2,-12","-2,-2,-11","-2,-2,-10","-2,-2,-9","-2,-1,-16","-2,-1,-14","-2,-1,-13","-2,-1,-11","-2,-1,-9","-2,0,-17","-2,0,-16","-2,0,-15","-2,0,-13","-2,0,-9","-1,-4,-16","-1,-4,-14","-1,-4,-13","-1,-4,-11","-1,-4,-9","-1,-3,-17","-1,-3,-16","-1,-3,-15","-1,-3,-14","-1,-3,-12","-1,-3,-11","-1,-3,-10","-1,-2,-17","-1,-2,-16","-1,-2,-15","-1,-2,-14","-1,-2,-13","-1,-2,-12","-1,-2,-11","-1,-2,-10","-1,-2,-9","-1,-1,-17","-1,-1,-16","-1,-1,-15","-1,-1,-14","-1,-1,-12","-1,-1,-11","-1,-1,-10","-1,0,-16","-1,0,-14","-1,0,-13","-1,0,-11","0,-4,-17","0,-4,-16","0,-4,-15","0,-4,-14","0,-4,-13","0,-4,-12","0,-4,-11","0,-4,-10","0,-4,-9","0,-3,-17","0,-3,-16","0,-3,-15","0,-3,-14","0,-3,-13","0,-3,-12","0,-3,-11","0,-3,-10","0,-3,-9","0,-2,-17","0,-2,-16","0,-2,-15","0,-2,-14","0,-2,-13","0,-2,-12","0,-2,-11","0,-2,-10","0,-2,-9","0,-1,-17","0,-1,-16","0,-1,-15","0,-1,-14","0,-1,-13","0,-1,-12","0,-1,-11","0,-1,-10","0,-1,-9","0,0,-17","0,0,-16","0,0,-15","0,0,-14","0,0,-13","0,0,-12","0,0,-11","0,0,-10","0,0,-9","1,-4,-16","1,-4,-14","1,-4,-13","1,-4,-11","1,-3,-17","1,-3,-16","1,-3,-15","1,-3,-14","1,-3,-12","1,-3,-11","1,-3,-10","1,-2,-17","1,-2,-16","1,-2,-15","1,-2,-14","1,-2,-13","1,-2,-12","1,-2,-11","1,-2,-10","1,-2,-9","1,-1,-17","1,-1,-16","1,-1,-15","1,-1,-14","1,-1,-12","1,-1,-11","1,-1,-10","1,0,-16","1,0,-14","1,0,-13","1,0,-11","1,0,-9","2,-4,-17","2,-4,-16","2,-4,-15","2,-4,-13","2,-4,-9","2,-3,-16","2,-3,-14","2,-3,-13","2,-3,-11","2,-3,-9","2,-2,-17","2,-2,-16","2,-2,-15","2,-2,-14","2,-2,-13","2,-2,-12","2,-2,-11","2,-2,-10","2,-2,-9","2,-1,-16","2,-1,-14","2,-1,-13","2,-1,-11","2,-1,-9","2,0,-17","2,0,-13","2,0,-9","-3,-4,-17","3,-4,-17","-3,-4,-9","3,-4,-9","-3,-4,-12","3,-4,-12","-3,-4,-14","3,-4,-14","-3,0,-17","3,0,-17","-3,0,-12","3,0,-12","1,3,-9","-1,3,-9","1,3,-8","-1,3,-8","1,3,-7","-1,3,-7"],"BLR":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,6,6,6,23,23,23,23,23,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,21,21,21,21,21,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,0,0,9,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,9,11,0,0,6,2,0,21,20,21,20,16,18,19,17,11,9,10,11,9,1,16,18,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,8,8,8,8,8,0,0,4,8,3,1,22,22,22,21,21,21,5,5,5,4,5,5,5,1,1,1,11,11,11,11,11,11,15,15,15,0,0,0,0,0,0,0,20,20,21,21,0,5,5,11,11,11,11,5,5,11,0,0,1,22,1,22,1,22,8,11,8,11,8,11,0,0,0,0,0,0,4,5,4,5,4,5,1,3,11,8,11,8,11,8,0,0,0,0,0,0,5,4,5,4,5,4,21,15,21,15,21,15,0,0,13,22,19,18,20,7,1,13,9,20,22,5,15,9,1,16,19,18,20,1,0,7,0,0,1,10,14,12,8,13,22,12,18,18,12,14,12,6,18,18,17,12,18,2,18,2,22,0,18,18,2,2,2,3,2,0,4,9,6,8,12,10,1,8,3,15,6,10,12,12,16,14,4,14,19,0,0,0,0,0,0,0,0,18,10,6,0,12,18,2,9,2,17,7,10,15,10,6,15,7,13,1,0,14,12,8,22,12,16,16,12,14,12,6,18,16,19,0,17,2,17,14,22,0,16,16,2,2,2,6,2,0,4,20,0,9,12,12,15,18,17,16,21,1,15,23,11,21,16,11,15,7,8,23,17,16,21,8,0,0,5,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0],"BP1":null,"BP2":null,"BCI":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"BEI":null,"BlockData":"GgEAMQAAAOABDycAAAAAAITNAAAANAAAAAAAAOMAAQAAAACwAYXNAAAA2QGGzQAAANkBXRsBAADZAQAAEPEMwKeAVyxGlpVKU+OXrYQBAAQAAAAAAgAQ9+OXZTLF2EKTl9xcvFBUHgMABAEAAAACAAQBAAAA3AAEzcxMPd0ABAAAekPeAASamZk+QAEEzcxMPUEBBAAAekNCAQSamZk+pAEEzcxMPaUBBAAAekOmAQSamZk+CAIEzcxMPQkCBAAAekMKAgSamZk+bAIEzcxMPW0CBAAAekNuAgSamZk+0AIEzcxMPdECBAAAekPSAgSamZk+0AcEAwAAANEHBAAA8EHSBwQAAKBB0wcEAADIQtQHBAAASELVBwQAACBBbgBgMS9EaXN0YW5jZSooQWx0aXR1ZGU+MSkqKENsb3NpbmdWZWxvY2l0eT4yMDApKihEaXN0YW5jZT41MD8gMTowLjAxKSpMb2coTWF4KENsb3NpbmdWZWxvY2l0eSwgMSkp0gAFYS84MDDTAAViLzE4MNQAG2QvODAwICogKGEgPiAxKSAqICh2ID4gMjAwKdwABBYAAADdAAQXAAAA3gAEGQAAACgjJE/lWQycpQBJq7dapQv/jB1Qcm9qZWN0aWxlIGF2b2lkYW5jZfwFAQEoIyJnrHFL1GGjT6XefNI1gfVzRm9ydHJlc3MgbWFub2V1dnJlAAAEAgAAAFQBAA4AAAAHAAAAAAAAAABdGwEAAAAAAAAEBgAAAF4BABwAAAAHAAEAAAAAAADmAgAAAAAAXQAAAAAAAF0bAQAAAAAAAAQHAAAAvgEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQIAAAAwAEADgAAAAcAaQEAAAAAAF0bAQAAAAAAAAQOAAAAwQEADgAAAAcAaQEAAAAAAF0bAQAAAAAAAAQPAAAAzQEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQQAAAAzgEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQRAAAAzwEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQSAAAA0AEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQTAAAA0QEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQUAAAA0gEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQWAAAA0wEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQXAAAA1AEADgAAAAcAAAAAAAAAAF0bAQAAAAAAAAQYAAAA1gEADgAAAAcADwAAAAAAAF0bAQAABwABAAQAmLdG1wEADgAAAAcADwAAAAAAAF0bAQAABwABAAQAmLdGIgIABwAAAAcAXRsBAAAAAAAABCkAAACiAgAcAAAABwABAAAAAAAAAgAAAAAAAAMAAAAAAABdGwEAAAAAAAAEOwAAAA==","VehicleData":"Vy4AAAAAAAAHAAAAAAAAAAAAAAAA8FsKAQAAAAAOAAAAAAAPJwAAAAAA0AcAAAAAAJ9xBAAAAAAADgAAAAAADycAAAAAAKCGAQAAAABHKQEAAAAAAAcAAAAAAAAAAAAAAADBfVafAAAAAAcAAAAHAAAAAAAAAAAAAAQBAAAAOe0HAAAAAAAHAAAABwABAAAAAAAAAAAEe4NQPz41FAAAAAAABwAAACMAAQAAAAAAAAoABM3MzD0LAATNzMw9DAAEzczMPQ0ABM3MzD0OAATNzMw9UkMAAAAAAAAHAAAAAAABAAAAAAAAxEoAAAAAAAAHAAAAHAAAAAAAAAAAAAAEy05QSAEABMZp5UMCAAR4lB1LAwAEAKD1RCveCgAAAAAABwAAAAgAAQAAAAAAAAAAAQABAAEAMo5QAAAAAAAHAAAAAAAAAAAAAAAA0KtlAAAAAAAOAAAACwAAAAAAAAAAAQAAAAALAAMAAQERAAQBAAAALssEAAAAAAAHAAAAAAAkiAAAAAAAwidhAAAAAAAHAAAARgAAAAAAAAAAAAAEAABIQgoABAAAyMEPAAQAAFxCFAAEAAD6QxkABACAO0UyAAQAQBxGNwAEAEAcRh4ABAAAgD8jAAQAAIA/KAAEAACgQRLoAQAAAAAADgAAAAAADycAAAAAAKCGAQAAAACh+VYAAAAAAA4AAAAAAA8nAAAAAACgY28AAAAA","designChanged":false,"blueprintVersion":13,"blueprintName":"Projectile Tracking Testing Fortress","SerialisedInfo":{"JsonDictionary":{},"IsEmpty":true},"Name":null,"ItemNumber":528,"LocalPosition":"8017.171,18.25727,10008.75","LocalRotation":"0,-0.1766985,0,0.984265","ForceId":1800788415,"TotalBlockCount":797,"MaxCords":"15,10,18","MinCords":"-15,-4,-18","BlockIdslockState":"=0,778","AliveCount":778,"BlockStringData":["-- Settings\r\n-- seconds to record target movements for\r\nlocal targetTrackTime = 10\r\n-- number of locations to track per enemy (todo: support tracking multiple projectiles)\r\nlocal numOrigins = 1\r\n-- time between switching targets\r\nlocal originSwitchTime = 0.25\r\n-- maximum time to remember origin points\r\nlocal maxStaleness = 3\r\n-- ranges to engage\r\nlocal minRange = 50\r\nlocal maxRange = 2000\r\n-- parameters to find weapons (important: name firing pieces AND turret blocks)\r\nlocal weaponDef = {\r\n  { name = \"laser\", velocity = math.huge }\r\n}\r\n-- degrees of inaccuracy allowed when firing\r\n-- weapon will start firing within this angle\r\n-- but will always try to obtain perfect accuracy\r\nlocal AIM_TOL = 0.1\r\n-- physics ticks per second (Lua runs in sync with game physics)\r\nlocal TICKS_PER_S = 40\r\n\r\nlocal projectilePos\r\nlocal times\r\nlocal enemies\r\nlocal currentLine\r\nlocal lastFrameTime\r\nlocal inited\r\nlocal prevTime\r\nlocal lastOrigin\r\nlocal lastOriginSwitchTime\r\nlocal turrets = {}\r\nlocal velocities = {}\r\n\r\nlocal BlockUtil = {}\r\nlocal Combat = {}\r\nlocal Accumulator = {}\r\nlocal Differ = {}\r\nlocal Graph = {}\r\nlocal LinkedList = {}\r\nlocal MathUtil = {}\r\nlocal RingBuffer = {}\r\nlocal VectorN = {}\r\nlocal Control = {}\r\nlocal Nav = {}\r\nlocal Targeting = {}\r\n\r\nfunction Init(I)\r\n  for idx, weapon in ipairs(weaponDef) do\r\n    velocities[idx] = weapon.velocity\r\n    turrets[idx] = BlockUtil.getWeaponsByName(I, weapon.name, 1, 2)\r\n  end\r\n  projectilePos = RingBuffer.RingBuffer(targetTrackTime * TICKS_PER_S)\r\n  times = RingBuffer.RingBuffer(targetTrackTime * TICKS_PER_S)\r\n  enemies = {}\r\n  math.randomseed(I:GetTime())\r\n  math.random()\r\n  math.random()\r\n  inited = true\r\nend\r\n\r\nfunction Update(I)\r\n  if not inited then Init(I) end\r\n  for tarIdx = 0, I:GetNumberOfTargets(0) do\r\n    local target = I:GetTargetInfo(0, tarIdx)\r\n    if not enemies[target.Id] then\r\n      enemies[target.Id] = { pos = RingBuffer.RingBuffer(targetTrackTime * TICKS_PER_S),\r\n                             vel = RingBuffer.RingBuffer(targetTrackTime * TICKS_PER_S),\r\n                             origins = RingBuffer.RingBuffer(numOrigins),\r\n                             originTimes = RingBuffer.RingBuffer(numOrigins) }\r\n      RingBuffer.setSize(enemies[target.Id].pos, times.size)\r\n      RingBuffer.setSize(enemies[target.Id].vel, times.size)\r\n    end\r\n    RingBuffer.push(enemies[target.Id].pos, target.Position)\r\n    RingBuffer.push(enemies[target.Id].vel, target.Velocity)\r\n  end\r\n\r\n  local frameTime = lastFrameTime and I:GetTimeSinceSpawn() - lastFrameTime or 0\r\n  lastFrameTime = I:GetTimeSinceSpawn()\r\n  -- calculate projectile location\r\n  local alt = 800 * I:GetPropulsionRequest(9) -- A axis, set in projectile avoidance routine\r\n  local relBear = 180 * I:GetPropulsionRequest(10) -- B axis\r\n  local dist = 800 * I:GetPropulsionRequest(12) -- D axis\r\n\r\n  local projectile = dist * Vector3.forward\r\n  projectile = Quaternion.AngleAxis(I:GetConstructYaw() + relBear, Vector3.up) * projectile\r\n  projectile = projectile + I:GetConstructCenterOfMass()\r\n  projectile.y = alt\r\n\r\n  if prevTime and RingBuffer.isFull(times) then\r\n    prevTime = prevTime - 1\r\n  end\r\n  RingBuffer.push(times, I:GetTimeSinceSpawn())\r\n  if dist == 0 then\r\n    currentLine = nil\r\n    RingBuffer.push(projectilePos, Vector3.zero)\r\n  else\r\n    RingBuffer.push(projectilePos, projectile)\r\n  end\r\n\r\n  -- compare to past projectile locations\r\n  -- to make sure we're tracking the same projectile\r\n\r\n  if projectilePos.size == 1 then return end\r\n  -- see if it matches current line\r\n  -- todo: store multiple lines and find match\r\n\r\n  -- 3/4ths the estimated drop in two frames due to gravity\r\n  -- inconsistent with theoretical formula due to discrete integration\r\n  -- powered missiles have no gravity so their expected error\r\n  -- is the negative of the drop due to gravity\r\n  local eps = 15 * frameTime * frameTime\r\n  if currentLine and CheckAndUpdateLine(I, currentLine, projectile, frameTime, eps) then\r\n    local target = I:GetTargetInfo(0, 0)\r\n    local enemy = enemies[target.Id]\r\n    local relVel = (currentLine.ds / currentLine.dt) - target.Velocity\r\n    local relPos = projectile - target.Position\r\n    local time2d = math.sqrt((relPos.x ^ 2 + relPos.z ^ 2) / (relVel.x ^ 2 + relVel.z ^2))\r\n    local estimate2d = relPos - (relVel * time2d) + 0.5 * I:GetGravityForAltitude(currentLine.start.y) * time2d * time2d\r\n    if estimate2d.sqrMagnitude < 150 * 150 then\r\n      local closest, closestTimeIdx = RunTrace(I, currentLine, enemy, prevTime)\r\n      if not closest then\r\n        I:Log(\"no solution found\")\r\n        prevTime = nil\r\n        return\r\n      end\r\n      prevTime = closestTimeIdx\r\n      if closest.sqrMagnitude < 100 * 100 then\r\n        RingBuffer.push(enemy.origins, closest)\r\n        RingBuffer.push(enemy.originTimes, I:GetTimeSinceSpawn())\r\n      end\r\n    end\r\n  elseif dist > 0 then\r\n    local start = projectilePos[projectilePos.size - 1]\r\n    currentLine = {\r\n      start = start,\r\n      tStart = times[times.size - 1],\r\n      ed = projectile\r\n    }\r\n    currentLine.dv = -frameTime * I:GetGravityForAltitude(start.y).y\r\n    currentLine.dy = frameTime * currentLine.dv\r\n    currentLine.ds = projectile + currentLine.dy * Vector3.up - start\r\n    currentLine.dt = frameTime\r\n    prevTime = nil\r\n  end\r\n\r\n  -- fire weapon at origins\r\n  local target = I:GetTargetInfo(0, 0)\r\n  if target and target.Valid then\r\n    local enemy = enemies[target.Id]\r\n    local fp = lastOrigin\r\n    if not lastOriginSwitchTime or I:GetTimeSinceSpawn() - lastOriginSwitchTime > originSwitchTime then\r\n      while enemy.origins.size > 0 and I:GetTimeSinceSpawn() - enemy.originTimes[1] > maxStaleness do\r\n        RingBuffer.pop(enemy.origins)\r\n        RingBuffer.pop(enemy.originTimes)\r\n      end\r\n      if enemy.origins.size == 0 then\r\n        fp = nil\r\n      end\r\n      fp = enemy.origins[math.random(1, enemy.origins.size)]\r\n      lastOriginSwitchTime = I:GetTimeSinceSpawn()\r\n      lastOrigin = fp\r\n    end\r\n    if fp then\r\n      local aim\r\n      for i, turret in ipairs(turrets) do\r\n        for j, weapon in ipairs(turret) do\r\n          local wInfo = BlockUtil.getWeaponInfo(I, weapon)\r\n          if velocities[i] == math.huge then\r\n            local range = (fp + target.Position - I:GetConstructPosition()).magnitude\r\n            if range > minRange and range < maxRange then\r\n              aim = fp + target.Position - wInfo.GlobalFirePoint\r\n            end\r\n          else\r\n            aim = Targeting.secondOrderTargeting(fp + target.Position - wInfo.GlobalFirePoint,\r\n                        target.Velocity - I:GetVelocityVector(),\r\n                        -I:GetGravityForAltitude(target.Position.y),\r\n                        velocities[i], minRange, maxRange)\r\n          end\r\n          if aim then\r\n            BlockUtil.aimWeapon(I, weapon, aim, 0)\r\n            if Vector3.Angle(wInfo.CurrentDirection, aim) < AIM_TOL then\r\n              BlockUtil.fireWeapon(I, weapon, 0)\r\n            end\r\n          end\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction LogVector(I, vec, label)\r\n  I:Log(label..\"(\"..vec.x..\", \"..vec.y..\", \"..vec.z..\")\")\r\nend\r\n\r\nfunction CheckAndUpdateLine(I, line, projectile, frameTime, tolerance)\r\n  local expected = line.ed + (line.ds * frameTime / line.dt)\r\n  local dv = line.dv - frameTime * I:GetGravityForAltitude(line.ed.y).y\r\n  local dy = line.dy + frameTime * dv\r\n  local projectileZeroG = projectile + dy * Vector3.up\r\n  if (expected - projectileZeroG).sqrMagnitude <= tolerance * tolerance then\r\n    line.ds = projectileZeroG - line.start\r\n    line.dv = dv\r\n    line.dy = dy\r\n    line.dt = times[times.size] - line.tStart\r\n    line.ed = projectile\r\n    return true\r\n  end\r\n  return false\r\nend\r\n\r\nfunction RunTrace(I, line, enemy, timeGuess)\r\n  local totalIter = 0\r\n  local targetPos = enemy.pos[enemy.pos.size]\r\n  local targetVel = enemy.vel[enemy.vel.size]\r\n  if timeGuess then\r\n    targetPos = enemy.pos[timeGuess]\r\n    targetVel = enemy.vel[timeGuess]\r\n    if not targetPos then\r\n      I:Log(\"initial guess has no target data\")\r\n      return nil\r\n    end\r\n  end\r\n  local tIdxClosest\r\n  for i = 1, timeGuess and 1 or 2 do\r\n    -- find the point of closest approach based on current target position and velocity\r\n    -- x(t) = x_i + v_x t\r\n    -- z(t) = z_i + v_z t\r\n    -- y(t) = y_i + v_y t + 0.5gt^2\r\n    -- squared distance = x^2 + y^2 + z^2\r\n\r\n    -- d/dt sqrDistance = \r\n    -- 2 x_i v_x + 2 v_x^2 t +\r\n    -- 2 z_i v_z + 2 v_z^2 t +\r\n    -- 2 y_i v_y + 2 v_y^2 t + 2 y_i g t + 3 v_y g t^2 + 0.25 g^2 t^3\r\n    -- this is a cubic polynomial in terms of t which we can find the roots of\r\n    local di = line.ed - targetPos\r\n    local projRelVel = line.ds / line.dt - line.dv * Vector3.up - targetVel\r\n    -- accounting exactly for gravity changes over altitude is difficult, just approximate and hope the enemy isn't using mortars\r\n    local g = I:GetGravityForAltitude(line.ed.y).y\r\n    local a, b, c = MathUtil.solveCubic(0.125 * g * g, 1.5 * projRelVel.y * g, projRelVel.sqrMagnitude + di.y * g, Vector3.Dot(di, projRelVel))\r\n    -- critical point is a minimum when derivative changes from negative to positive\r\n    -- since leading term is always positive (0.125g^2 = 12.2), if there are three roots, the first and third are minima\r\n    -- if there is one root, it is a minimum\r\n    local minRoot, minimum\r\n    if a and b and c then\r\n      local firstRoot = math.min(a, b, c)\r\n      local lastRoot = math.max(a, b, c)\r\n      local firstSqrDist = SqrDistance(firstRoot)\r\n      local lastSqrDist = SqrDistance(lastRoot)\r\n      if firstSqrDist < lastSqrDist then\r\n        minRoot = firstRoot\r\n      else\r\n        minRoot = lastRoot\r\n      end\r\n    elseif a then\r\n      minRoot = a\r\n    end\r\n    -- get target position and velocity at estimated time of closest approach\r\n    tIdxClosest = InterpolatedSearch(I, times, 1, times.size, minRoot + line.tStart + line.dt, true)\r\n    if not tIdxClosest then return nil end\r\n    targetPos = enemy.pos[tIdxClosest]\r\n    targetVel = enemy.vel[tIdxClosest]\r\n    local dt = times[tIdxClosest] - line.tStart\r\n    if not targetPos then\r\n      I:Log(\"iterated guess has no target data\")\r\n      return nil\r\n    end\r\n  end\r\n\r\n  -- linear search to find best point\r\n  -- todo: account for target velocity\r\n  function CalcSqrDist(tIdx)\r\n    local dt = times[tIdx] - line.tStart\r\n    return (line.start - enemy.pos[tIdx] + dt * (line.ds / line.dt) + 0.5 * I:GetGravityForAltitude(line.start.y) * dt * dt).sqrMagnitude\r\n  end\r\n  local currentSqrDist = CalcSqrDist(tIdxClosest)\r\n  local vi = line.ds / line.dt\r\n  local halfG = 0.5 * I:GetGravityForAltitude(line.start.y)\r\n  if tIdxClosest < enemy.pos.size then\r\n    local aftSqrDist = CalcSqrDist(tIdxClosest + 1)\r\n    while aftSqrDist < currentSqrDist and tIdxClosest < enemy.pos.size do\r\n      currentSqrDist = aftSqrDist\r\n      tIdxClosest = tIdxClosest + 1\r\n      targetPos = enemy.pos[tIdxClosest]\r\n      if tIdxClosest < enemy.pos.size then\r\n        aftSqrDist = CalcSqrDist(tIdxClosest + 1)\r\n      end\r\n      totalIter = totalIter + 1\r\n      if totalIter >= 100 then\r\n        I:Log(\"max iterations exceeded on upwards search\")\r\n        break\r\n      end\r\n    end\r\n  end\r\n  --I:Log(totalIter..\" iterations after upwards search\")\r\n  if tIdxClosest > 1 then\r\n    local befSqrDist = CalcSqrDist(tIdxClosest - 1)\r\n    while befSqrDist < currentSqrDist and tIdxClosest > 1 do\r\n      currentSqrDist = befSqrDist\r\n      tIdxClosest = tIdxClosest - 1\r\n      targetPos = enemy.pos[tIdxClosest]\r\n      if tIdxClosest > 1 then\r\n        befSqrDist = CalcSqrDist(tIdxClosest -1)\r\n      end\r\n      totalIter = totalIter + 1\r\n      if totalIter >= 100 then\r\n        I:Log(\"max iterations exceeded on downwards search\")\r\n        break\r\n      end\r\n    end\r\n  end\r\n  --I:Log(totalIter..\" iterations after downwards search\")\r\n  local dt = times[tIdxClosest] - line.tStart\r\n  return line.start - targetPos + dt * (line.ds / line.dt) + 0.5 * I:GetGravityForAltitude(line.start.y) * dt * dt, tIdxClosest\r\nend\r\n\r\nfunction SqrDistance(I, line, targetAbsPos, targetAbsVel, t)\r\n  local di = line.ed - targetAbsPos\r\n  local viRel = line.ds / line.dt - line.dv * Vector3.up - targetAbsVel\r\n  local diff = di + t * viRel + 0.5 * I:GetGravityForAltitude(line.ed.y) * t * t\r\n  return diff.sqrMagnitude\r\nend\r\n\r\nfunction InterpolatedSearch(I, list, left, right, target, findClosest)\r\n  local a, b, split\r\n  local totalIter = 0\r\n  while right > left do\r\n    a = list[left]\r\n    if a == target then return left end\r\n    if a > target then return findClosest and left or nil end\r\n    b = list[right]\r\n    if b == target then return right end\r\n    if b < target then return findClosest and right or nil end\r\n    split = math.floor((target - a) / (b - a) * (right - left) + left)\r\n    split = math.min(math.max(split, left + 1), right - 1)\r\n    if list[split] == target then return split end\r\n    if target < list[split] then\r\n      if findClosest and math.abs(list[split - 1] - target) > math.abs(list[split] - target) then\r\n        return split\r\n      end\r\n      right = split - 1\r\n    else\r\n      if findClosest and math.abs(list[split + 1] - target) > math.abs(list[split] - target) then\r\n        return split\r\n      end\r\n      left = split + 1\r\n    end\r\n    totalIter = totalIter + 1\r\n    if totalIter > 50 then\r\n      I:Log(\"max iterations exceeded on InterpolatedSearch\")\r\n      break\r\n    end\r\n  end\r\n  return findClosest and left or nil\r\nend\r\n\r\n-- minified version of Tides library (not meant to be human-readable, see Tides.lua or individual class files for human-readable source)\r\nfunction Accumulator.Accumulator(a,b)local c={}c.decay=b;c.window=a;c.time=0;c.weight=0;if a>0 then c.vals=LinkedList.LinkedList()c.times=LinkedList.LinkedList()end;return c end;function Accumulator.update(c,d,e)local f=Mathf.Pow(c.decay,e)if not c.value then c.value=d*e else c.value=c.value*f;c.value=c.value+d*e end;c.time=c.time+e;c.weight=c.weight*f;c.weight=c.weight+e;if c.window>0 then LinkedList.pushFront(c.vals,d)LinkedList.pushFront(c.times,e)while c.time>c.window do local g=LinkedList.popBack(c.times)c.time=c.time-g;local h=Mathf.Pow(c.decay,c.time)c.weight=c.weight-g*h;c.value=c.value-LinkedList.popBack(c.vals)*g*h end end;return c.value,c.weight end;function Accumulator.get(c)return c.value,c.weight end;function Differ.Differ(i)local j={}j.lastVal=i;j.diff=nil;return j end;function Differ.update(j,d)if j.lastVal then j.diff=d-j.lastVal;j.lastVal=d end;j.lastVal=d;return j.diff end;function Differ.get(j)return j.diff end;function LinkedList.LinkedList()local k={}k.value=nil;k.next=k;k.prev=k;return k end;function LinkedList.pushFront(l,d)local k={}k.value=d;LinkedList.connect(k,l.next)LinkedList.connect(l,k)end;function LinkedList.pushBack(l,d)local k={}k.value=d;LinkedList.connect(l.prev,k)LinkedList.connect(k,l)end;function LinkedList.popFront(l)local m=l.next.value;LinkedList.connect(l,l.next.next)return m end;function LinkedList.popBack(l)local m=l.prev.value;LinkedList.connect(l.prev.prev,l)return m end;function LinkedList.peekFront(l)return l.next.val end;function LinkedList.peekBack(l)return l.prev.val end;function LinkedList.connect(n,o)n.next=o;o.prev=n end;function LinkedList.toArray(l)local p=1;local q={}local k=l.next;while k~=l do q[p]=k.value;k=k.next end;return q end;function MathUtil.angleOnPlane(r,s,t)local u=Vector3.ProjectOnPlane(r,t)local g=Vector3.ProjectOnPlane(s,t)return Vector3.SignedAngle(u,g,t)end;function MathUtil.min(v,w)local x=nil;w=w or function(y,z)return y<z end;for ele in v do if not x or w(ele,x)then x=ele end end;return x end;function MathUtil.max(v,w)local A=nil;w=w or function(y,z)return y<z end;for ele in v do if not A or w(A,ele)then A=ele end end;return A end;function MathUtil.range(y,z,B)local C,D=y,z;local E;if not y then return end;if not z then C=0;D=y;E=C<D and 1 or-1 elseif B then E=B end;return function(F,G)local H=G+E;if H==D then return nil end;return H end,nil,C-E end;function MathUtil.shuffle(l)local I={}for p=1,#l do I[p]=l[p]end;for p=#l,2,-1 do local J=math.random(p)I[p],I[J]=I[J],I[p]end;return I end;function MathUtil.combine(y,z,K)if#y==#z then local L={}for M,N in pairs(y)do L[M]=K(M,N,z[M])end;return L end end;function MathUtil.distribution()return{n=0}end;function MathUtil.updateDistribution(O,P)O.n=O.n+1;if O.n==1 then O.mean=P;O.covariance={}local h=#P;for p=1,h do local Q={}for J=1,h do Q[J]=0 end;O.covariance[p]=Q end else O.mean=O.mean+1/(O.n+1)*P end end;function MathUtil.mean(O)return O.mean end;function MathUtil.covariance(O)return O.cov end;function MathUtil.normal()local R,S=MathUtil.boxMuller()return R end;function MathUtil.normalPDF(R)return math.exp(-0.5*R*R)/math.sqrt(2*math.pi)end;function MathUtil.normalCDF(R)local T=0.2316419;local U=0.319381530;local V=-0.356563782;local W=1.781477937;local X=-1.821255978;local Y=1.330274429;local g=1/(1+T*R)return 1-MathUtil.normalPDF(R)*(U*g+V*g^2+W*g^3+X*g^4+Y*g^5)end;function MathUtil.inverseNorm(Z)local _=Z>=0.5 and Z or-Z;local R=5.55556*(1-((1-_)/_)^0.1186)if Z<0.5 then R=-R end;return R end;function MathUtil.boxMuller()local a0=math.random()local a1=math.random()a1=math.random()a1=math.random()local a2=math.sqrt(-2*math.log(a0))local a3=2*math.pi*a1;return a2*math.cos(a3),a2*math.sin(a3)end;function MathUtil.angleSSS(y,z,B)if y+z<B or y+B<z or z+B<y then return nil end;local a4=math.deg(math.acos((z*z+B*B-y*y)/(2*z*B)))local a5,a6=MathUtil.angleSAS(z,a4,B)return a4,a5,a6 end;function MathUtil.sideSAS(y,a6,z)local a7=y*y+z*z-2*y*z*math.cos(math.rad(a6))return math.sqrt(a7)end;function MathUtil.angleSAS(y,a6,z)local B=MathUtil.sideSAS(y,a6,z)if MathUtil.isZero(B)then return nil end;local a4,a5;if y<z then a4=MathUtil.angleLoSin(B,y,a6)a5=180-a4-a6 else a5=MathUtil.angleLoSin(B,z,a6)a4=180-a5-a6 end;return a4,a5 end;function MathUtil.sideSSA(y,z,a4)local a8=z*z-y*y;local a9=-2*z*math.cos(math.rad(a4))local aa,ab=MathUtil.solveQuadratic(1,a9,a8)if not ab then return aa,ab end;if aa<ab then return aa,ab end;return ab,aa end;function MathUtil.angleSSA(y,z,a4)local aa,ab=MathUtil.sideSSA(y,z,a4)if not aa then return nil end;local ac,ad=MathUtil.angleSAS(z,a4,aa)if not ab then return ac,ad end;local ae,af=MathUtil.angleSAS(z,a4,ab)return ac,ad,ae,af end;function MathUtil.sideAAS(a4,a5,y)local a6=180-a4-a5;local z=MathUtil.sideLoSin(a4,a5,y)local B=MathUtil.sideLoSin(a4,a6,y)return z,B end;function MathUtil.sideLoSin(y,a4,a5)return y*math.sin(math.rad(a5))/math.sin(math.rad(a4))end;function MathUtil.angleLoSin(y,z,a4)return math.deg(math.asin(z*math.sin(math.rad(a4))/y))end;function MathUtil.clampCone(ag,ah,ai)local aj=math.min(ai,Vector3.Angle(ag,ah))local ak=Vector3.Cross(ag,ah)return Quaternion.AngleAxis(aj,ak)*ag end;local al=1e-9;function MathUtil.isZero(h)return h>-al and h<al end;function MathUtil.cuberoot(am)return am>0 and am^(1/3)or-math.abs(am)^(1/3)end;function MathUtil.solveQuadratic(an,aa,ab)local ao,ap;local Z,aq,ar;Z=aa/(2*an)aq=ab/an;ar=Z*Z-aq;if MathUtil.isZero(ar)then ao=-Z;return ao elseif ar<0 then return else local as=math.sqrt(ar)ao=as-Z;ap=-as-Z;return ao,ap end end;function MathUtil.solveCubic(an,aa,ab,at)local ao,ap,au;local av,aw;local a4,a5,a6;local ax,Z,aq;local ay,ar;a4=aa/an;a5=ab/an;a6=at/an;ax=a4*a4;Z=1/3*(-(1/3)*ax+a5)aq=0.5*(2/27*a4*ax-1/3*a4*a5+a6)ay=Z*Z*Z;ar=aq*aq+ay;if MathUtil.isZero(ar)then if MathUtil.isZero(aq)then ao=0;av=1 else local az=MathUtil.cuberoot(-aq)ao=2*az;ap=-az;av=2 end elseif ar<0 then local aA=1/3*math.acos(-aq/math.sqrt(-ay))local g=2*math.sqrt(-Z)ao=g*math.cos(aA)ap=-g*math.cos(aA+math.pi/3)au=-g*math.cos(aA-math.pi/3)av=3 else local as=math.sqrt(ar)local az=MathUtil.cuberoot(as-aq)local N=-MathUtil.cuberoot(as+aq)ao=az+N;av=1 end;aw=1/3*a4;if av>0 then ao=ao-aw end;if av>1 then ap=ap-aw end;if av>2 then au=au-aw end;return ao,ap,au end;function MathUtil.solveQuartic(an,aa,ab,at,aB)local ao,ap,au,aC;local aD={}local R,az,N,aw;local a4,a5,a6,ar;local ax,Z,aq,a2;local av;a4=aa/an;a5=ab/an;a6=at/an;ar=aB/an;ax=a4*a4;Z=-0.375*ax+a5;aq=0.125*ax*a4-0.5*a4*a5+a6;a2=-(3/256)*ax*ax+0.0625*ax*a5-0.25*a4*a6+ar;if MathUtil.isZero(a2)then aD[3]=aq;aD[2]=Z;aD[1]=0;aD[0]=1;local aE={MathUtil.solveCubic(aD[0],aD[1],aD[2],aD[3])}av=#aE;ao,ap,au=aE[1],aE[2],aE[3]else aD[3]=0.5*a2*Z-0.125*aq*aq;aD[2]=-a2;aD[1]=-0.5*Z;aD[0]=1;ao,ap,au=MathUtil.solveCubic(aD[0],aD[1],aD[2],aD[3])R=ao;az=R*R-a2;N=2*R-Z;if MathUtil.isZero(az)then az=0 elseif az>0 then az=math.sqrt(az)else return end;if MathUtil.isZero(N)then N=0 elseif N>0 then N=math.sqrt(N)else return end;aD[2]=R-az;aD[1]=aq<0 and-N or N;aD[0]=1;do local aE={MathUtil.solveQuadratic(aD[0],aD[1],aD[2])}av=#aE;ao,ap=aE[1],aE[2]end;aD[2]=R+az;aD[1]=aq<0 and N or-N;aD[0]=1;if av==0 then local aE={MathUtil.solveQuadratic(aD[0],aD[1],aD[2])}av=av+#aE;ao,ap=aE[1],aE[2]end;if av==1 then local aE={MathUtil.solveQuadratic(aD[0],aD[1],aD[2])}av=av+#aE;ap,au=aE[1],aE[2]end;if av==2 then local aE={MathUtil.solveQuadratic(aD[0],aD[1],aD[2])}av=av+#aE;au,aC=aE[1],aE[2]end end;aw=0.25*a4;if av>0 then ao=ao-aw end;if av>1 then ap=ap-aw end;if av>2 then au=au-aw end;if av>3 then aC=aC-aw end;return ao,ap,au,aC end;function RingBuffer.RingBuffer(aF)local aG={}aG.buf={}aG.capacity=aF;aG.size=0;aG.head=1;local aH=getmetatable(aG)or{}aH.__index=RingBuffer.get;setmetatable(aG,aH)return aG end;function RingBuffer.isFull(aG)return aG.size>=aG.capacity end;function RingBuffer.setSize(aG,aI)aG.size=aI end;function RingBuffer.push(aG,d)aG.buf[(aG.head+aG.size-1)%aG.capacity+1]=d;if aG.size==aG.capacity then aG.head=aG.head%aG.capacity+1 else aG.size=aG.size+1 end end;function RingBuffer.pop(aG)if aG.size==0 then return nil end;local m=aG.buf[aG.head]aG.buf[aG.head]=nil;aG.head=aG.head%aG.capacity+1;aG.size=aG.size-1;return m end;function RingBuffer.get(aG,aJ)if type(aJ)~=\"number\"or math.floor(aJ)~=aJ then return nil end;if aJ<1 or aJ>aG.size then return nil end;return aG.buf[(aG.head+aJ-2)%aG.capacity+1]end;VectorN.mt=getmetatable({})or{}VectorN.mt.__add=function(y,z)local aK=type(y)==\"int\"local aL=type(z)==\"int\"if not aK and aL then return z+y end;if aK and not aL then return MathUtil.combine(y,z,function(M,am,aM)return y+aM end)else return MathUtil.combine(y,z,function(M,am,aM)return am+aM end)end end;VectorN.mt.__sub=function(y,z)return y+-z end;VectorN.mt.__mul=function(y,z)local aK=type(y)==\"int\"local aL=type(z)==\"int\"if not aK and aL then return z*y end;if aK and not aL then local L={}for M,N in pairs(z)do L[M]=y*N end;return L else return MathUtil.combine(y,z,function(M,am,aM)return am*aM end)end end;VectorN.mt.__div=function(y,z)local aK=type(y)==\"int\"local aL=type(z)==\"int\"if not aK and aL then return y*1/z end;if aK and not aL then local L={}for M,N in pairs(z)do L[M]=y/N end;return L else return MathUtil.combine(y,z,function(M,am,aM)return am/aM end)end end;VectorN.mt.__unm=function(y)local L={}for M,N in pairs(y)do L[M]=-N end;return L end;function VectorN.VectorN(l)local aN={}for M,N in pairs(l)do if type(N)==\"table\"then aN[M]=VectorN.VectorN(N)else aN[M]=N end end;setmetatable(aN,VectorN.mt)return aN end;function Control.PID(aO,aP,aQ,aR,aS,aT)local aU={}aU.kP=aO;aU.kI=aP;aU.kD=aQ;aU.Iacc=Accumulator.Accumulator(aR,aS)if aT and aT~=0 then aU.period=aT end;return aU end;function Control.processPID(aV,aW,e)aW=aV.period and(aW+aV.period/2)%aV.period-aV.period/2 or aW;local Z=aV.kP*aW;local p,aX=aV.kI*Accumulator.update(aV.Iacc,aW,e)p=p/aX;local h=aV.kD*(aW-(aV.lastError or aW))/e;aV.lastError=aW;return Z+p+h end;function Control.FF(aD,aT)local aY={}aY.coeffs=aD;aY.degree=#aD-1;if aT and aT~=0 then aY.period=aT end;aY.derivs={}return aY end;function Control.processFF(aV,aZ,e)local a_=0*aZ;local b0=aZ;local b1=aZ;for p=1,aV.degree+1 do b1=aV.derivs[p]aV.derivs[p]=b0;a_=a_+aV.coeffs[p]*b0;if b1 then local b2=b0-b1;if p==1 and aV.period then b2=(b2+aV.period/2)%aV.period-aV.period/2 end;b0=b2/e else break end end;return a_ end;function Nav.toLocal(b3,b4,b5)local b6=b3-b4;return Quaternion.Inverse(b5)*b6 end;function Nav.toGlobal(b7,b4,b5)local b6=b5*b7;return b6+b4 end;function Nav.cartToPol(b8)local a2=b8.magnitude;local a3=Vector3.SignedAngle(Vector3.forward,b8,Vector3.up)local aA=90-Vector3.Angle(Vector3.up,b8)return Vector3(a2,a3,aA)end;function Nav.cartToCyl(b8)local b9=Vector3(b8.x,0,b8.z)local ba=b9.magnitude;local aA=Vector3.SignedAngle(Vector3.forward,b8,Vector3.up)local R=b8.y;return Vector3(ba,aA,R)end;function Nav.polToCart(b8)local a2,a3,aA=b8.x,b8.y,b8.z;local am=Mathf.Sin(a3)*Mathf.Cos(aA)local aM=Mathf.Sin(aA)local R=Mathf.Cos(a3)*Mathf.Cos(aA)return a2*Vector3(am,aM,R)end;function Nav.cylToCart(b8)local ba,aA,bb=b8.x,b8.y,b8.z;local am=ba*Mathf.Sin(aA)local aM=bb;local R=ba*Mathf.Cos(aA)return Vector3(am,aM,R)end;function Targeting.firstOrderTargeting(bc,bd,be)local bf=bc-Vector3.Project(bc,bd)local bg=Vector3.Dot(bd,bc-bf)/bd.sqrMagnitude;local y,z=MathUtil.solveQuadratic(bg-be*be,2*bg,bf.sqrMagnitude+bg*bg)local bh=nil;if y and y>=0 then bh=y end;if z and z>=0 and z<y then bh=z end;return bh and(bc+bh*bd).normalized or nil end;function Targeting.secondOrderTargeting(bc,bi,bj,be,bk,bl)local g=Targeting.secondOrderTargetingTime(bc,bi,bj,be,bk/be,bl/be)if g and g>0 then return(bc/g+bi+0.5*bj*g).normalized end;return nil end;function Targeting.secondOrderTargetingTime(bc,bi,bj,be,bm,bn)local y=0.25*bj.sqrMagnitude;local z=Vector3.Dot(bi,bj)local B=bi.sqrMagnitude-be*be+Vector3.Dot(bc,bj)local h=2*Vector3.Dot(bc,bi)local aW=bc.sqrMagnitude;local bo={MathUtil.solveQuartic(y,z,B,h,aW)}local g=nil;for p=1,4 do if bo[p]and bo[p]>bm and bo[p]<bn then if not g or g and bo[p]<g then g=bo[p]end end end;return g end;function Targeting.AIPPN(bp,bc,bq,bd,br)local bi=bd-bq;local bs=Vector3.Dot(-bi,bc.normalized)if bs<=0 then bs=10 end;local bt=bc.magnitude/bs;local bu=Vector3.Cross(bc,bi)/bc.sqrMagnitude;local bv=Vector3.Cross(bc,br)/bc.sqrMagnitude*bt/2;local bw=bu+bv;local bx=Vector3.Cross(bw,bc.normalized)local by=Vector3.ProjectOnPlane(bx,bq).normalized;local bz=bp*bq.magnitude*bw.magnitude;return bz*by end;function Targeting.ATPN(bp,bc,bq,bd,br)local bi=bd-bq;local bs=-Vector3.Dot(bi,bc.normalized)if bs<=0 then bs=10 end;local bu=Vector3.Cross(bc,bi)/bc.sqrMagnitude;local bx=Vector3.Cross(bu,bc.normalized)local bA=Vector3.ProjectOnPlane(br,bc)return bp*bs*bx+0.5*bp*br end;function BlockUtil.getWeaponsByName(bB,bC,bD,bE)if DEBUG then bB:Log(\"searching for \"..bC)end;local bF=bB:GetAllSubConstructs()local bG={}bD=bD or-1;local B=bD;if not bE or bE==0 or bE==2 then for p=0,bB:GetWeaponCount()-1 do if B==0 then break end;if bB:GetWeaponBlockInfo(p).CustomName==bC then table.insert(bG,{subIdx=nil,wpnIdx=p})if DEBUG then bB:Log(\"found weapon \"..bC..\" on hull, type \"..bB:GetWeaponInfo(p).WeaponType)end;B=B-1 end end end;if not bE or bE==1 or bE==2 then for aJ=1,#bF do local aw=bF[aJ]for p=0,bB:GetWeaponCountOnSubConstruct(aw)-1 do if B==0 then break end;if bB:GetWeaponBlockInfoOnSubConstruct(aw,p).CustomName==bC then table.insert(bG,{subIdx=aw,wpnIdx=p})if DEBUG then bB:Log(\"found weapon \"..bC..\" on subobj \"..aw..\", type \"..bB:GetWeaponInfo(p).WeaponType)end;B=B-1 end end end end;if DEBUG then bB:Log(\"weapon count: \"..#bG)end;return bG end;function BlockUtil.getSubConstructsByName(bB,bC,bD)if DEBUG then bB:Log(\"searching for \"..bC)end;local bF=bB:GetAllSubConstructs()local bH={}bD=bD or-1;local B=bD;for aJ=1,#bF do local aw=bF[aJ]if B==0 then break end;if bB:GetSubConstructInfo(aw).CustomName==bC then table.insert(bH,aw)if DEBUG then bB:Log(\"found subobj \"..bC)end;B=B-1 end end;if DEBUG then bB:Log(\"subobj count: \"..#bH)end;return bH end;function BlockUtil.getBlocksByName(bB,bC,type,bD)if DEBUG then bB:Log(\"searching for \"..bC)end;local bI={}bD=bD or-1;local B=bD;for aJ=0,bB:Component_GetCount(type)-1 do if B==0 then break end;if bB:Component_GetBlockInfo(type,aJ).CustomName==bC then table.insert(bI,aJ)if DEBUG then bB:Log(\"found component \"..bC)end;B=B-1 end end;if DEBUG then bB:Log(\"component count: \"..#bI)end;return bI end;function BlockUtil.getWeaponInfo(bB,bJ)local bK;if bJ.subIdx then bK=bB:GetWeaponInfoOnSubConstruct(bJ.subIdx,bJ.wpnIdx)else bK=bB:GetWeaponInfo(bJ.wpnIdx)end;return bK end;function BlockUtil.aimWeapon(bB,bJ,bL,bM)if bJ.subIdx then bB:AimWeaponInDirectionOnSubConstruct(bJ.subIdx,bJ.wpnIdx,bL.x,bL.y,bL.z,bM)else bB:AimWeaponInDirection(bJ.wpnIdx,bL.x,bL.y,bL.z,bM)end end;function BlockUtil.fireWeapon(bB,bJ,bM)if bJ.subIdx then bB:FireWeaponOnSubConstruct(bJ.subIdx,bJ.wpnIdx,bM)else bB:FireWeapon(bJ.wpnIdx,bM)end end;function Combat.pickTarget(bB,bN,bO)bO=bO or function(F,bP)return bP.Priority end;local aZ,bQ;for p in MathUtil.range(bB:GetNumberOfTargets(bN))do local bP=bB:GetTargetInfo(bN,p)local bR=bO(bB,bP)if not aZ or bR>bQ then aZ=bP;bQ=bR end end;return aZ end;function Combat.CheckConstraints(bB,bS,bT,bU)local bV;if bU then bV=bB:GetWeaponConstraintsOnSubConstruct(bU,bT)else bV=bB:GetWeaponConstraints(bT)end;local bW=bB:GetConstructForwardVector()local bX=bB:GetConstructUpVector()local bY=Quaternion.LookRotation(bW,bX)bS=Quaternion.Inverse(bY)*bS;if bV.InParentConstructSpace and bU then local bZ=bB:GetSubConstructInfo(bU).localRotation;bS=Quaternion.inverse(bZ)*bS end;local b_=MathUtil.angleOnPlane(Vector3.forward,bS,Vector3.up)local c0=bS;c0.z=0;local c1=Mathf.Atan2(bS.z,c0.magnitude)local c2=b_>bV.MinAzimuth and b_<bV.MaxAzimuth;local c3=c1>bV.MinElevation and c1<bV.MaxElevation;if bV.FlipAzimuth then c2=not c2 end;if c2 and c3 then return true end;b_=b_+180;ele=180-ele;if ele>180 then ele=ele-360 end;if ele<-180 then ele=ele+360 end;c2=b_>bV.MinAzimuth and b_<bV.MaxAzimuth;c3=c1>bV.MinElevation and c1<bV.MaxElevation;if bV.FlipAzimuth then c2=not c2 end;if c2 and c3 then return true end;return false end\r\n"],"BlockStringDataIds":[41],"GameVersion":"3.5.5.30","PersistentSubObjectIndex":7,"PersistentBlockIndex":68,"AuthorDetails":{"Valid":true,"ForeignBlocks":0,"CreatorId":"051780ed-f58a-41a6-b60f-84fb260c1b22","ObjectId":"fe5bb7da-f3e9-4d92-acd2-f7002e9544b0","CreatorReadableName":"DreekFire","HashV1":"a5598512ea30c7b3f81210225838b965"},"BlockCount":778}}